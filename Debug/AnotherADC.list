
AnotherADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007790  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c8  080079c8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079c8  080079c8  000089c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d0  080079d0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d0  080079d0  000089d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079d4  080079d4  000089d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080079d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d78  20000060  08007a38  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd8  08007a38  00009dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a16e  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cc  00000000  00000000  000231fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  000269d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000111a  00000000  00000000  00027fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037b6  00000000  00000000  000290da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ca0  00000000  00000000  0002c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4c60  00000000  00000000  00043530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ffc  00000000  00000000  000e81d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ee1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007918 	.word	0x08007918

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007918 	.word	0x08007918

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 8000514:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000256 	.word	0x20000256

0800052c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)            /* TIM1 interrupt */
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <HAL_TIM_IC_CaptureCallback+0x40>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d105      	bne.n	800054a <HAL_TIM_IC_CaptureCallback+0x1e>
    {
    	leftMotorCounter  = __HAL_TIM_GetCounter(htim);                     /* do your own processing */
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000544:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000546:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Instance == TIM4)       /* TIM3 interrupt */
    {
    	rightMotorCounter = __HAL_TIM_GetCounter(htim);
    }
}
 8000548:	e009      	b.n	800055e <HAL_TIM_IC_CaptureCallback+0x32>
    else if (htim->Instance == TIM4)       /* TIM3 interrupt */
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d104      	bne.n	800055e <HAL_TIM_IC_CaptureCallback+0x32>
    	rightMotorCounter = __HAL_TIM_GetCounter(htim);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800055a:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800055c:	6013      	str	r3, [r2, #0]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40010000 	.word	0x40010000
 8000570:	2000025c 	.word	0x2000025c
 8000574:	40000800 	.word	0x40000800
 8000578:	20000260 	.word	0x20000260

0800057c <DriveMotor>:

void DriveMotor(uint8_t channel, uint8_t dir, uint8_t speed )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	460b      	mov	r3, r1
 8000588:	71bb      	strb	r3, [r7, #6]
 800058a:	4613      	mov	r3, r2
 800058c:	717b      	strb	r3, [r7, #5]
	uint32_t pwm_period = __HAL_TIM_GET_AUTORELOAD(&htim3);  // Get ARR (Auto-Reload Register)
 800058e:	4b2f      	ldr	r3, [pc, #188]	@ (800064c <DriveMotor+0xd0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000594:	60fb      	str	r3, [r7, #12]
	uint32_t pulse = (pwm_period + 1) * speed / 100;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	797a      	ldrb	r2, [r7, #5]
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000650 <DriveMotor+0xd4>)
 80005a2:	fba2 2303 	umull	r2, r3, r2, r3
 80005a6:	095b      	lsrs	r3, r3, #5
 80005a8:	60bb      	str	r3, [r7, #8]
	if (channel) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d024      	beq.n	80005fa <DriveMotor+0x7e>
		//right motor
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80005b0:	2104      	movs	r1, #4
 80005b2:	4826      	ldr	r0, [pc, #152]	@ (800064c <DriveMotor+0xd0>)
 80005b4:	f003 f85c 	bl	8003670 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80005b8:	210c      	movs	r1, #12
 80005ba:	4824      	ldr	r0, [pc, #144]	@ (800064c <DriveMotor+0xd0>)
 80005bc:	f003 f858 	bl	8003670 <HAL_TIM_PWM_Stop>
		if (dir) {
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00c      	beq.n	80005e0 <DriveMotor+0x64>
			//backwards
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 80005c6:	4b21      	ldr	r3, [pc, #132]	@ (800064c <DriveMotor+0xd0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005ce:	2104      	movs	r1, #4
 80005d0:	481e      	ldr	r0, [pc, #120]	@ (800064c <DriveMotor+0xd0>)
 80005d2:	f002 ff9d 	bl	8003510 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80005d6:	210c      	movs	r1, #12
 80005d8:	481c      	ldr	r0, [pc, #112]	@ (800064c <DriveMotor+0xd0>)
 80005da:	f003 f849 	bl	8003670 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse);
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
		}
	}
}
 80005de:	e030      	b.n	8000642 <DriveMotor+0xc6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse);
 80005e0:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <DriveMotor+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80005e8:	2104      	movs	r1, #4
 80005ea:	4818      	ldr	r0, [pc, #96]	@ (800064c <DriveMotor+0xd0>)
 80005ec:	f003 f840 	bl	8003670 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005f0:	210c      	movs	r1, #12
 80005f2:	4816      	ldr	r0, [pc, #88]	@ (800064c <DriveMotor+0xd0>)
 80005f4:	f002 ff8c 	bl	8003510 <HAL_TIM_PWM_Start>
}
 80005f8:	e023      	b.n	8000642 <DriveMotor+0xc6>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80005fa:	2100      	movs	r1, #0
 80005fc:	4813      	ldr	r0, [pc, #76]	@ (800064c <DriveMotor+0xd0>)
 80005fe:	f003 f837 	bl	8003670 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000602:	2108      	movs	r1, #8
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <DriveMotor+0xd0>)
 8000606:	f003 f833 	bl	8003670 <HAL_TIM_PWM_Stop>
		if (dir) {
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00c      	beq.n	800062a <DriveMotor+0xae>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <DriveMotor+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000618:	2100      	movs	r1, #0
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <DriveMotor+0xd0>)
 800061c:	f002 ff78 	bl	8003510 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000620:	2108      	movs	r1, #8
 8000622:	480a      	ldr	r0, [pc, #40]	@ (800064c <DriveMotor+0xd0>)
 8000624:	f003 f824 	bl	8003670 <HAL_TIM_PWM_Stop>
}
 8000628:	e00b      	b.n	8000642 <DriveMotor+0xc6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse);
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <DriveMotor+0xd0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <DriveMotor+0xd0>)
 8000636:	f003 f81b 	bl	8003670 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800063a:	2108      	movs	r1, #8
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <DriveMotor+0xd0>)
 800063e:	f002 ff67 	bl	8003510 <HAL_TIM_PWM_Start>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000016c 	.word	0x2000016c
 8000650:	51eb851f 	.word	0x51eb851f

08000654 <NavTurnLeft>:
	//how many counts per one wheel turn?
	//prevent counter from overflow
	//DriveMotor(channel, dir, speed);
}

void NavTurnLeft() {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	DriveMotor(0, 0, 50);
 8000658:	2232      	movs	r2, #50	@ 0x32
 800065a:	2100      	movs	r1, #0
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ff8d 	bl	800057c <DriveMotor>
	DriveMotor(1, 1, 50);
 8000662:	2232      	movs	r2, #50	@ 0x32
 8000664:	2101      	movs	r1, #1
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff ff88 	bl	800057c <DriveMotor>
	osDelay(240); //should read encoder steps
 800066c:	20f0      	movs	r0, #240	@ 0xf0
 800066e:	f004 fb8d 	bl	8004d8c <osDelay>
	DriveMotor(0, 1, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2101      	movs	r1, #1
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff ff80 	bl	800057c <DriveMotor>
	DriveMotor(1, 1, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ff7b 	bl	800057c <DriveMotor>
	// add backward spin on the other wheel
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}

0800068a <NavTurnRight>:

void NavTurnRight() {
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
	DriveMotor(0, 1, 50);
 800068e:	2232      	movs	r2, #50	@ 0x32
 8000690:	2101      	movs	r1, #1
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff72 	bl	800057c <DriveMotor>
	DriveMotor(1, 0, 50);
 8000698:	2232      	movs	r2, #50	@ 0x32
 800069a:	2100      	movs	r1, #0
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff6d 	bl	800057c <DriveMotor>
	osDelay(240); //should read encoder steps
 80006a2:	20f0      	movs	r0, #240	@ 0xf0
 80006a4:	f004 fb72 	bl	8004d8c <osDelay>
	DriveMotor(0, 1, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ff65 	bl	800057c <DriveMotor>
	DriveMotor(1, 1, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff ff60 	bl	800057c <DriveMotor>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 ff00 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f85c 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 fae4 	bl	8000c98 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d0:	f000 fac2 	bl	8000c58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 fa96 	bl	8000c04 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006d8:	f000 f8be 	bl	8000858 <MX_ADC1_Init>
  MX_TIM3_Init();
 80006dc:	f000 f9a0 	bl	8000a20 <MX_TIM3_Init>
  MX_TIM1_Init();
 80006e0:	f000 f946 	bl	8000970 <MX_TIM1_Init>
  MX_TIM4_Init();
 80006e4:	f000 fa3a 	bl	8000b5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80006e8:	213c      	movs	r1, #60	@ 0x3c
 80006ea:	481a      	ldr	r0, [pc, #104]	@ (8000754 <main+0x94>)
 80006ec:	f003 f8ca 	bl	8003884 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80006f0:	213c      	movs	r1, #60	@ 0x3c
 80006f2:	4819      	ldr	r0, [pc, #100]	@ (8000758 <main+0x98>)
 80006f4:	f003 f8c6 	bl	8003884 <HAL_TIM_Encoder_Start_IT>
  //}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f8:	f004 fa6c 	bl	8004bd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fc:	4a17      	ldr	r2, [pc, #92]	@ (800075c <main+0x9c>)
 80006fe:	2100      	movs	r1, #0
 8000700:	4817      	ldr	r0, [pc, #92]	@ (8000760 <main+0xa0>)
 8000702:	f004 fab1 	bl	8004c68 <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a16      	ldr	r2, [pc, #88]	@ (8000764 <main+0xa4>)
 800070a:	6013      	str	r3, [r2, #0]

  /* creation of motorsTask */
  motorsTaskHandle = osThreadNew(StartTask02, NULL, &motorsTask_attributes);
 800070c:	4a16      	ldr	r2, [pc, #88]	@ (8000768 <main+0xa8>)
 800070e:	2100      	movs	r1, #0
 8000710:	4816      	ldr	r0, [pc, #88]	@ (800076c <main+0xac>)
 8000712:	f004 faa9 	bl	8004c68 <osThreadNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <main+0xb0>)
 800071a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800071c:	f004 fa7e 	bl	8004c1c <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  count ++;
	  convCompleted=0;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <main+0xb4>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_DMA(&hadc1, (uint16_t *)rawValues, 5);
 8000726:	2205      	movs	r2, #5
 8000728:	4913      	ldr	r1, [pc, #76]	@ (8000778 <main+0xb8>)
 800072a:	4814      	ldr	r0, [pc, #80]	@ (800077c <main+0xbc>)
 800072c:	f000 ff76 	bl	800161c <HAL_ADC_Start_DMA>
	  while(!convCompleted) {
 8000730:	bf00      	nop
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <main+0xb4>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0fb      	beq.n	8000732 <main+0x72>
//	  sprintf(msg, "DistH2: %hu \r\n", aDistH2);
	//  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	//  sprintf(msg, "cTemp: %hu \r\n", cTemp);
	 // HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
	 if (count > 600) {
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <main+0xc0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000742:	dd02      	ble.n	800074a <main+0x8a>
		 count = 1;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <main+0xc0>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
	 }
	 HAL_Delay(6);
 800074a:	2006      	movs	r0, #6
 800074c:	f000 fefe 	bl	800154c <HAL_Delay>
	  convCompleted=0;
 8000750:	e7e6      	b.n	8000720 <main+0x60>
 8000752:	bf00      	nop
 8000754:	200001b4 	.word	0x200001b4
 8000758:	20000124 	.word	0x20000124
 800075c:	08007960 	.word	0x08007960
 8000760:	08000da5 	.word	0x08000da5
 8000764:	20000244 	.word	0x20000244
 8000768:	08007984 	.word	0x08007984
 800076c:	08000e11 	.word	0x08000e11
 8000770:	20000248 	.word	0x20000248
 8000774:	20000256 	.word	0x20000256
 8000778:	2000024c 	.word	0x2000024c
 800077c:	2000007c 	.word	0x2000007c
 8000780:	20000258 	.word	0x20000258

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	@ 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	@ 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f006 ffd0 	bl	8007738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a27      	ldr	r2, [pc, #156]	@ (8000850 <SystemClock_Config+0xcc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b8:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a21      	ldr	r2, [pc, #132]	@ (8000854 <SystemClock_Config+0xd0>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f4:	2310      	movs	r3, #16
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fe:	2304      	movs	r3, #4
 8000800:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000802:	2304      	movs	r3, #4
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4618      	mov	r0, r3
 800080c:	f002 f8aa 	bl	8002964 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000816:	f000 fb23 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fb0c 	bl	8002e54 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000842:	f000 fb0d 	bl	8000e60 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	@ 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086a:	4b3d      	ldr	r3, [pc, #244]	@ (8000960 <MX_ADC1_Init+0x108>)
 800086c:	4a3d      	ldr	r2, [pc, #244]	@ (8000964 <MX_ADC1_Init+0x10c>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000870:	4b3b      	ldr	r3, [pc, #236]	@ (8000960 <MX_ADC1_Init+0x108>)
 8000872:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000876:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000878:	4b39      	ldr	r3, [pc, #228]	@ (8000960 <MX_ADC1_Init+0x108>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800087e:	4b38      	ldr	r3, [pc, #224]	@ (8000960 <MX_ADC1_Init+0x108>)
 8000880:	2201      	movs	r2, #1
 8000882:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000884:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <MX_ADC1_Init+0x108>)
 8000886:	2200      	movs	r2, #0
 8000888:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088a:	4b35      	ldr	r3, [pc, #212]	@ (8000960 <MX_ADC1_Init+0x108>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b33      	ldr	r3, [pc, #204]	@ (8000960 <MX_ADC1_Init+0x108>)
 8000894:	2200      	movs	r2, #0
 8000896:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000898:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <MX_ADC1_Init+0x108>)
 800089a:	4a33      	ldr	r2, [pc, #204]	@ (8000968 <MX_ADC1_Init+0x110>)
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089e:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <MX_ADC1_Init+0x108>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80008a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <MX_ADC1_Init+0x108>)
 80008a6:	2205      	movs	r2, #5
 80008a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <MX_ADC1_Init+0x108>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <MX_ADC1_Init+0x108>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b8:	4829      	ldr	r0, [pc, #164]	@ (8000960 <MX_ADC1_Init+0x108>)
 80008ba:	f000 fe6b 	bl	8001594 <HAL_ADC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c4:	f000 facc 	bl	8000e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008d0:	2307      	movs	r3, #7
 80008d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4821      	ldr	r0, [pc, #132]	@ (8000960 <MX_ADC1_Init+0x108>)
 80008da:	f000 ffa3 	bl	8001824 <HAL_ADC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e4:	f000 fabc 	bl	8000e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	481a      	ldr	r0, [pc, #104]	@ (8000960 <MX_ADC1_Init+0x108>)
 80008f6:	f000 ff95 	bl	8001824 <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000900:	f000 faae 	bl	8000e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000904:	2304      	movs	r3, #4
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	4813      	ldr	r0, [pc, #76]	@ (8000960 <MX_ADC1_Init+0x108>)
 8000912:	f000 ff87 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800091c:	f000 faa0 	bl	8000e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000920:	2308      	movs	r3, #8
 8000922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <MX_ADC1_Init+0x108>)
 800092e:	f000 ff79 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000938:	f000 fa92 	bl	8000e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_ADC1_Init+0x114>)
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000940:	2305      	movs	r3, #5
 8000942:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_ADC1_Init+0x108>)
 800094a:	f000 ff6b 	bl	8001824 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000954:	f000 fa84 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000007c 	.word	0x2000007c
 8000964:	40012000 	.word	0x40012000
 8000968:	0f000001 	.word	0x0f000001
 800096c:	10000012 	.word	0x10000012

08000970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	@ 0x30
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2224      	movs	r2, #36	@ 0x24
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f006 feda 	bl	8007738 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098c:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 800098e:	4a23      	ldr	r2, [pc, #140]	@ (8000a1c <MX_TIM1_Init+0xac>)
 8000990:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 8000994:	2232      	movs	r2, #50	@ 0x32
 8000996:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800099e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 80009a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b8:	2303      	movs	r3, #3
 80009ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009c0:	2301      	movs	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 80009e4:	f002 fea8 	bl	8003738 <HAL_TIM_Encoder_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 fa37 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MX_TIM1_Init+0xa8>)
 8000a00:	f003 fd5e 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 fa29 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	@ 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000124 	.word	0x20000124
 8000a1c:	40010000 	.word	0x40010000

08000a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	@ 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b40      	ldr	r3, [pc, #256]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a52:	4a41      	ldr	r2, [pc, #260]	@ (8000b58 <MX_TIM3_Init+0x138>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6600;
 8000a56:	4b3f      	ldr	r3, [pc, #252]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a58:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 8000a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000a64:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a66:	22ff      	movs	r2, #255	@ 0xff
 8000a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b38      	ldr	r3, [pc, #224]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a76:	4837      	ldr	r0, [pc, #220]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a78:	f002 fc3e 	bl	80032f8 <HAL_TIM_Base_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a82:	f000 f9ed 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4830      	ldr	r0, [pc, #192]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000a94:	f003 f956 	bl	8003d44 <HAL_TIM_ConfigClockSource>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a9e:	f000 f9df 	bl	8000e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa2:	482c      	ldr	r0, [pc, #176]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000aa4:	f002 fcda 	bl	800345c <HAL_TIM_PWM_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000aae:	f000 f9d7 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4824      	ldr	r0, [pc, #144]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000ac2:	f003 fcfd 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000acc:	f000 f9c8 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad0:	2360      	movs	r3, #96	@ 0x60
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8000ad4:	23ff      	movs	r3, #255	@ 0xff
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000ae8:	f003 f86a 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000af2:	f000 f9b5 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8000af6:	23c8      	movs	r3, #200	@ 0xc8
 8000af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2204      	movs	r2, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000b02:	f003 f85d 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000b0c:	f000 f9a8 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 8000b10:	2364      	movs	r3, #100	@ 0x64
 8000b12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2208      	movs	r2, #8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000b1c:	f003 f850 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8000b26:	f000 f99b 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000b2a:	2332      	movs	r3, #50	@ 0x32
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	220c      	movs	r2, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000b36:	f003 f843 	bl	8003bc0 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8000b40:	f000 f98e 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b44:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <MX_TIM3_Init+0x134>)
 8000b46:	f000 fb01 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000b4a:	bf00      	nop
 8000b4c:	3738      	adds	r7, #56	@ 0x38
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000016c 	.word	0x2000016c
 8000b58:	40000400 	.word	0x40000400

08000b5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	@ 0x30
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2224      	movs	r2, #36	@ 0x24
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 fde4 	bl	8007738 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b78:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000b7a:	4a21      	ldr	r2, [pc, #132]	@ (8000c00 <MX_TIM4_Init+0xa4>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000b80:	2232      	movs	r2, #50	@ 0x32
 8000b82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000bca:	f002 fdb5 	bl	8003738 <HAL_TIM_Encoder_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f944 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_TIM4_Init+0xa0>)
 8000be6:	f003 fc6b 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000bf0:	f000 f936 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3730      	adds	r7, #48	@ 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001b4 	.word	0x200001b4
 8000c00:	40000800 	.word	0x40000800

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <MX_USART2_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f003 fcc2 	bl	80045c4 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f000 f90b 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001fc 	.word	0x200001fc
 8000c54:	40004400 	.word	0x40004400

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_DMA_Init+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a0b      	ldr	r2, [pc, #44]	@ (8000c94 <MX_DMA_Init+0x3c>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_DMA_Init+0x3c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	2038      	movs	r0, #56	@ 0x38
 8000c80:	f001 f938 	bl	8001ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	@ 0x38
 8000c86:	f001 f951 	bl	8001f2c <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a37      	ldr	r2, [pc, #220]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a30      	ldr	r2, [pc, #192]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a29      	ldr	r2, [pc, #164]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a22      	ldr	r2, [pc, #136]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <MX_GPIO_Init+0xfc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000d24:	481c      	ldr	r0, [pc, #112]	@ (8000d98 <MX_GPIO_Init+0x100>)
 8000d26:	f001 fe03 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2130      	movs	r1, #48	@ 0x30
 8000d2e:	481b      	ldr	r0, [pc, #108]	@ (8000d9c <MX_GPIO_Init+0x104>)
 8000d30:	f001 fdfe 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <MX_GPIO_Init+0x108>)
 8000d4c:	f001 fc6c 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin;
 8000d50:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <MX_GPIO_Init+0x100>)
 8000d6a:	f001 fc5d 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d6e:	2330      	movs	r3, #48	@ 0x30
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_GPIO_Init+0x104>)
 8000d86:	f001 fc4f 	bl	8002628 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40020800 	.word	0x40020800

08000da4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      osDelay(500);
 8000dac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000db0:	f003 ffec 	bl	8004d8c <osDelay>
	  HAL_GPIO_WritePin(GPIOA, LD5_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dba:	4813      	ldr	r0, [pc, #76]	@ (8000e08 <StartDefaultTask+0x64>)
 8000dbc:	f001 fdb8 	bl	8002930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <StartDefaultTask+0x68>)
 8000dc6:	f001 fdb3 	bl	8002930 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000dca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dce:	f003 ffdd 	bl	8004d8c <osDelay>
	  HAL_GPIO_WritePin(GPIOB, LD4_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <StartDefaultTask+0x68>)
 8000dd8:	f001 fdaa 	bl	8002930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	480a      	ldr	r0, [pc, #40]	@ (8000e0c <StartDefaultTask+0x68>)
 8000de2:	f001 fda5 	bl	8002930 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000de6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dea:	f003 ffcf 	bl	8004d8c <osDelay>
	  HAL_GPIO_WritePin(GPIOA, LD5_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <StartDefaultTask+0x64>)
 8000df6:	f001 fd9b 	bl	8002930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LD4_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <StartDefaultTask+0x68>)
 8000e00:	f001 fd96 	bl	8002930 <HAL_GPIO_WritePin>
      osDelay(500);
 8000e04:	bf00      	nop
 8000e06:	e7d1      	b.n	8000dac <StartDefaultTask+0x8>
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020400 	.word	0x40020400

08000e10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	//DriveMotor(1, 1, 50);
	//DriveMotor(0, 1, 50);
	//osDelay(500);
	//DriveMotor(0, 1, 0);
	//DriveMotor(1, 1, 0);
	osDelay(1500);
 8000e18:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e1c:	f003 ffb6 	bl	8004d8c <osDelay>
	NavTurnLeft();
 8000e20:	f7ff fc18 	bl	8000654 <NavTurnLeft>
	osDelay(4800);
 8000e24:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 8000e28:	f003 ffb0 	bl	8004d8c <osDelay>
	NavTurnRight();
 8000e2c:	f7ff fc2d 	bl	800068a <NavTurnRight>
	osDelay(1500);
 8000e30:	bf00      	nop
 8000e32:	e7f1      	b.n	8000e18 <StartTask02+0x8>

08000e34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM1) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e42:	4293      	cmp	r3, r2
	} else if (htim->Instance == TIM4)       /* TIM3 interrupt */
	{
		//counterxxX2 = __HAL_TIM_GetCounter(htim);
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e4c:	d101      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    HAL_IncTick();
 8000e4e:	f000 fb5d 	bl	800150c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40010000 	.word	0x40010000

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <Error_Handler+0x8>

08000e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_MspInit+0x54>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	4a11      	ldr	r2, [pc, #68]	@ (8000ec0 <HAL_MspInit+0x54>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <HAL_MspInit+0x54>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_MspInit+0x54>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_MspInit+0x54>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_MspInit+0x54>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	210f      	movs	r1, #15
 8000eae:	f06f 0001 	mvn.w	r0, #1
 8000eb2:	f001 f81f 	bl	8001ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8000fd4 <HAL_ADC_MspInit+0x110>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d171      	bne.n	8000fca <HAL_ADC_MspInit+0x106>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	4a3a      	ldr	r2, [pc, #232]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef6:	4b38      	ldr	r3, [pc, #224]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b34      	ldr	r3, [pc, #208]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a33      	ldr	r2, [pc, #204]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b31      	ldr	r3, [pc, #196]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <HAL_ADC_MspInit+0x114>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000f3a:	2313      	movs	r3, #19
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4823      	ldr	r0, [pc, #140]	@ (8000fdc <HAL_ADC_MspInit+0x118>)
 8000f4e:	f001 fb6b 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	481e      	ldr	r0, [pc, #120]	@ (8000fe0 <HAL_ADC_MspInit+0x11c>)
 8000f66:	f001 fb5f 	bl	8002628 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe8 <HAL_ADC_MspInit+0x124>)
 8000f6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fa2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fae:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fb0:	f000 ffca 	bl	8001f48 <HAL_DMA_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fba:	f7ff ff51 	bl	8000e60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <HAL_ADC_MspInit+0x120>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	200000c4 	.word	0x200000c4
 8000fe8:	40026410 	.word	0x40026410

08000fec <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	@ 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a3a      	ldr	r2, [pc, #232]	@ (80010f4 <HAL_TIM_Encoder_MspInit+0x108>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d135      	bne.n	800107a <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a38      	ldr	r2, [pc, #224]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a31      	ldr	r2, [pc, #196]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001046:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001058:	2301      	movs	r3, #1
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4826      	ldr	r0, [pc, #152]	@ (80010fc <HAL_TIM_Encoder_MspInit+0x110>)
 8001064:	f001 fae0 	bl	8002628 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	201b      	movs	r0, #27
 800106e:	f000 ff41 	bl	8001ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001072:	201b      	movs	r0, #27
 8001074:	f000 ff5a 	bl	8001f2c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001078:	e038      	b.n	80010ec <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM4)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <HAL_TIM_Encoder_MspInit+0x114>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d133      	bne.n	80010ec <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	4a1a      	ldr	r2, [pc, #104]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6413      	str	r3, [r2, #64]	@ 0x40
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010bc:	23c0      	movs	r3, #192	@ 0xc0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	480b      	ldr	r0, [pc, #44]	@ (8001104 <HAL_TIM_Encoder_MspInit+0x118>)
 80010d8:	f001 faa6 	bl	8002628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2105      	movs	r1, #5
 80010e0:	201e      	movs	r0, #30
 80010e2:	f000 ff07 	bl	8001ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010e6:	201e      	movs	r0, #30
 80010e8:	f000 ff20 	bl	8001f2c <HAL_NVIC_EnableIRQ>
}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	@ 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010000 	.word	0x40010000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40000800 	.word	0x40000800
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10d      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_TIM_Base_MspInit+0x40>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <HAL_TIM_Base_MspInit+0x40>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_TIM_Base_MspInit+0x40>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40000400 	.word	0x40000400
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a30      	ldr	r2, [pc, #192]	@ (800122c <HAL_TIM_MspPostInit+0xe0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d15a      	bne.n	8001224 <HAL_TIM_MspPostInit+0xd8>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b2f      	ldr	r3, [pc, #188]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a2e      	ldr	r2, [pc, #184]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a27      	ldr	r2, [pc, #156]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a20      	ldr	r2, [pc, #128]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <HAL_TIM_MspPostInit+0xe4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23c0      	movs	r3, #192	@ 0xc0
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011d2:	2302      	movs	r3, #2
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4815      	ldr	r0, [pc, #84]	@ (8001234 <HAL_TIM_MspPostInit+0xe8>)
 80011de:	f001 fa23 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011e2:	2302      	movs	r3, #2
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011f2:	2302      	movs	r3, #2
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	480e      	ldr	r0, [pc, #56]	@ (8001238 <HAL_TIM_MspPostInit+0xec>)
 80011fe:	f001 fa13 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001214:	2302      	movs	r3, #2
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	@ (800123c <HAL_TIM_MspPostInit+0xf0>)
 8001220:	f001 fa02 	bl	8002628 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40000400 	.word	0x40000400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800

08001240 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <HAL_UART_MspInit+0x84>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12b      	bne.n	80012ba <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_UART_MspInit+0x88>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_UART_MspInit+0x88>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_UART_MspInit+0x88>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_UART_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <HAL_UART_MspInit+0x88>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_UART_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800129a:	230c      	movs	r3, #12
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012aa:	2307      	movs	r3, #7
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <HAL_UART_MspInit+0x8c>)
 80012b6:	f001 f9b7 	bl	8002628 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000

080012d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	@ 0x38
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b34      	ldr	r3, [pc, #208]	@ (80013b8 <HAL_InitTick+0xe8>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	4a33      	ldr	r2, [pc, #204]	@ (80013b8 <HAL_InitTick+0xe8>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f0:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <HAL_InitTick+0xe8>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012fc:	f107 0210 	add.w	r2, r7, #16
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f001 ffc4 	bl	8003294 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001316:	f001 ff95 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 800131a:	6378      	str	r0, [r7, #52]	@ 0x34
 800131c:	e004      	b.n	8001328 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800131e:	f001 ff91 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8001322:	4603      	mov	r3, r0
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800132a:	4a24      	ldr	r2, [pc, #144]	@ (80013bc <HAL_InitTick+0xec>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	3b01      	subs	r3, #1
 8001334:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001336:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <HAL_InitTick+0xf0>)
 8001338:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800133c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <HAL_InitTick+0xf0>)
 8001340:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001344:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_InitTick+0xf0>)
 8001348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <HAL_InitTick+0xf0>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <HAL_InitTick+0xf0>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <HAL_InitTick+0xf0>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800135e:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <HAL_InitTick+0xf0>)
 8001360:	f001 ffca 	bl	80032f8 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800136a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11b      	bne.n	80013aa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001372:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <HAL_InitTick+0xf0>)
 8001374:	f002 f810 	bl	8003398 <HAL_TIM_Base_Start_IT>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800137e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001382:	2b00      	cmp	r3, #0
 8001384:	d111      	bne.n	80013aa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001386:	201c      	movs	r0, #28
 8001388:	f000 fdd0 	bl	8001f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	d808      	bhi.n	80013a4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001392:	2200      	movs	r2, #0
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	201c      	movs	r0, #28
 8001398:	f000 fdac 	bl	8001ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800139c:	4a09      	ldr	r2, [pc, #36]	@ (80013c4 <HAL_InitTick+0xf4>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e002      	b.n	80013aa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3738      	adds	r7, #56	@ 0x38
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	431bde83 	.word	0x431bde83
 80013c0:	20000264 	.word	0x20000264
 80013c4:	20000004 	.word	0x20000004

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <NMI_Handler+0x4>

080013d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <MemManage_Handler+0x4>

080013e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <UsageFault_Handler+0x4>

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <TIM1_CC_IRQHandler+0x10>)
 8001406:	f002 faeb 	bl	80039e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000124 	.word	0x20000124

08001414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <TIM2_IRQHandler+0x10>)
 800141a:	f002 fae1 	bl	80039e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000264 	.word	0x20000264

08001428 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <TIM4_IRQHandler+0x10>)
 800142e:	f002 fad7 	bl	80039e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001b4 	.word	0x200001b4

0800143c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <DMA2_Stream0_IRQHandler+0x10>)
 8001442:	f000 fe87 	bl	8002154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000c4 	.word	0x200000c4

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001478:	f7ff ffea 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	@ (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	@ (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f006 f9af 	bl	8007804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a6:	f7ff f90b 	bl	80006c0 <main>
  bx  lr    
 80014aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014b8:	080079d8 	.word	0x080079d8
  ldr r2, =_sbss
 80014bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014c0:	20004dd8 	.word	0x20004dd8

080014c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <HAL_Init+0x40>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <HAL_Init+0x40>)
 80014de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <HAL_Init+0x40>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 fcf4 	bl	8001ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f7ff feea 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fcb6 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008
 8001530:	200002ac 	.word	0x200002ac

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200002ac 	.word	0x200002ac

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008

08001594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e033      	b.n	8001612 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fc86 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015da:	f023 0302 	bic.w	r3, r3, #2
 80015de:	f043 0202 	orr.w	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fa4e 	bl	8001a88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40
 8001602:	e001      	b.n	8001608 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_ADC_Start_DMA+0x1e>
 8001636:	2302      	movs	r3, #2
 8001638:	e0ce      	b.n	80017d8 <HAL_ADC_Start_DMA+0x1bc>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	d018      	beq.n	8001682 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001660:	4b5f      	ldr	r3, [pc, #380]	@ (80017e0 <HAL_ADC_Start_DMA+0x1c4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a5f      	ldr	r2, [pc, #380]	@ (80017e4 <HAL_ADC_Start_DMA+0x1c8>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9a      	lsrs	r2, r3, #18
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001674:	e002      	b.n	800167c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	3b01      	subs	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f9      	bne.n	8001676 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001690:	d107      	bne.n	80016a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 8086 	bne.w	80017be <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f023 0206 	bic.w	r2, r3, #6
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80016fe:	e002      	b.n	8001706 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170e:	4b36      	ldr	r3, [pc, #216]	@ (80017e8 <HAL_ADC_Start_DMA+0x1cc>)
 8001710:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001716:	4a35      	ldr	r2, [pc, #212]	@ (80017ec <HAL_ADC_Start_DMA+0x1d0>)
 8001718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171e:	4a34      	ldr	r2, [pc, #208]	@ (80017f0 <HAL_ADC_Start_DMA+0x1d4>)
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001726:	4a33      	ldr	r2, [pc, #204]	@ (80017f4 <HAL_ADC_Start_DMA+0x1d8>)
 8001728:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001732:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001742:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001752:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	334c      	adds	r3, #76	@ 0x4c
 800175e:	4619      	mov	r1, r3
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f000 fc9e 	bl	80020a4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10f      	bne.n	8001794 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d129      	bne.n	80017d6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	e020      	b.n	80017d6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <HAL_ADC_Start_DMA+0x1dc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d11b      	bne.n	80017d6 <HAL_ADC_Start_DMA+0x1ba>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d114      	bne.n	80017d6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	e00b      	b.n	80017d6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	40012300 	.word	0x40012300
 80017ec:	08001c81 	.word	0x08001c81
 80017f0:	08001d3b 	.word	0x08001d3b
 80017f4:	08001d57 	.word	0x08001d57
 80017f8:	40012000 	.word	0x40012000

080017fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1c>
 800183c:	2302      	movs	r3, #2
 800183e:	e113      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x244>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b09      	cmp	r3, #9
 800184e:	d925      	bls.n	800189c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68d9      	ldr	r1, [r3, #12]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	3b1e      	subs	r3, #30
 8001866:	2207      	movs	r2, #7
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43da      	mvns	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	400a      	ands	r2, r1
 8001874:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68d9      	ldr	r1, [r3, #12]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	4603      	mov	r3, r0
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4403      	add	r3, r0
 800188e:	3b1e      	subs	r3, #30
 8001890:	409a      	lsls	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	e022      	b.n	80018e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6919      	ldr	r1, [r3, #16]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	2207      	movs	r2, #7
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4403      	add	r3, r0
 80018d8:	409a      	lsls	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d824      	bhi.n	8001934 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	3b05      	subs	r3, #5
 80018fc:	221f      	movs	r2, #31
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	400a      	ands	r2, r1
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b05      	subs	r3, #5
 8001926:	fa00 f203 	lsl.w	r2, r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	@ 0x34
 8001932:	e04c      	b.n	80019ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d824      	bhi.n	8001986 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b23      	subs	r3, #35	@ 0x23
 800194e:	221f      	movs	r2, #31
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4618      	mov	r0, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	3b23      	subs	r3, #35	@ 0x23
 8001978:	fa00 f203 	lsl.w	r2, r0, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
 8001984:	e023      	b.n	80019ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	3b41      	subs	r3, #65	@ 0x41
 8001998:	221f      	movs	r2, #31
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	400a      	ands	r2, r1
 80019a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b41      	subs	r3, #65	@ 0x41
 80019c2:	fa00 f203 	lsl.w	r2, r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ce:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <HAL_ADC_ConfigChannel+0x250>)
 80019d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a28      	ldr	r2, [pc, #160]	@ (8001a78 <HAL_ADC_ConfigChannel+0x254>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d10f      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1d8>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d10b      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_ADC_ConfigChannel+0x254>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12b      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <HAL_ADC_ConfigChannel+0x258>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d003      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x1f4>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b11      	cmp	r3, #17
 8001a16:	d122      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a11      	ldr	r2, [pc, #68]	@ (8001a7c <HAL_ADC_ConfigChannel+0x258>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d111      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_ADC_ConfigChannel+0x25c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a11      	ldr	r2, [pc, #68]	@ (8001a84 <HAL_ADC_ConfigChannel+0x260>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9a      	lsrs	r2, r3, #18
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40012300 	.word	0x40012300
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	10000012 	.word	0x10000012
 8001a80:	20000000 	.word	0x20000000
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a90:	4b79      	ldr	r3, [pc, #484]	@ (8001c78 <ADC_Init+0x1f0>)
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	021a      	lsls	r2, r3, #8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	4a58      	ldr	r2, [pc, #352]	@ (8001c7c <ADC_Init+0x1f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d022      	beq.n	8001b66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6899      	ldr	r1, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e00f      	b.n	8001b86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b84:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0202 	bic.w	r2, r2, #2
 8001b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6899      	ldr	r1, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ba0:	005a      	lsls	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01b      	beq.n	8001bec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bc2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6859      	ldr	r1, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	3b01      	subs	r3, #1
 8001be0:	035a      	lsls	r2, r3, #13
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	e007      	b.n	8001bfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bfa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	051a      	lsls	r2, r3, #20
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6899      	ldr	r1, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c3e:	025a      	lsls	r2, r3, #9
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	029a      	lsls	r2, r3, #10
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	0f000001 	.word	0x0f000001

08001c80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d13c      	bne.n	8001d14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12b      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d127      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d119      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0220 	bic.w	r2, r2, #32
 8001ce6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7fe fbfd 	bl	800050c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d12:	e00e      	b.n	8001d32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff fd75 	bl	8001810 <HAL_ADC_ErrorCallback>
}
 8001d26:	e004      	b.n	8001d32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d46:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff fd57 	bl	80017fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d62:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff fd4a 	bl	8001810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	@ (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff4c 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f06:	f7ff ff61 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	6978      	ldr	r0, [r7, #20]
 8001f12:	f7ff ffb1 	bl	8001e78 <NVIC_EncodePriority>
 8001f16:	4602      	mov	r2, r0
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff80 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff54 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff faee 	bl	8001534 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e099      	b.n	8002098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f84:	e00f      	b.n	8001fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f86:	f7ff fad5 	bl	8001534 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d908      	bls.n	8001fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e078      	b.n	8002098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e8      	bne.n	8001f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4b38      	ldr	r3, [pc, #224]	@ (80020a0 <HAL_DMA_Init+0x158>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d107      	bne.n	8002010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	4313      	orrs	r3, r2
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	2b04      	cmp	r3, #4
 8002038:	d117      	bne.n	800206a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00e      	beq.n	800206a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fa6f 	bl	8002530 <DMA_CheckFifoParam>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2240      	movs	r2, #64	@ 0x40
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002066:	2301      	movs	r3, #1
 8002068:	e016      	b.n	8002098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fa26 	bl	80024c4 <DMA_CalcBaseAndBitshift>
 8002078:	4603      	mov	r3, r0
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002080:	223f      	movs	r2, #63	@ 0x3f
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	f010803f 	.word	0xf010803f

080020a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Start_IT+0x26>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e040      	b.n	800214c <HAL_DMA_Start_IT+0xa8>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d12f      	bne.n	800213e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f9b8 	bl	8002468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	223f      	movs	r2, #63	@ 0x3f
 80020fe:	409a      	lsls	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0216 	orr.w	r2, r2, #22
 8002112:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0208 	orr.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e005      	b.n	800214a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002146:	2302      	movs	r3, #2
 8002148:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800214a:	7dfb      	ldrb	r3, [r7, #23]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002160:	4b8e      	ldr	r3, [pc, #568]	@ (800239c <HAL_DMA_IRQHandler+0x248>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a8e      	ldr	r2, [pc, #568]	@ (80023a0 <HAL_DMA_IRQHandler+0x24c>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a9b      	lsrs	r3, r3, #10
 800216c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	2208      	movs	r2, #8
 8002180:	409a      	lsls	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01a      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0204 	bic.w	r2, r2, #4
 80021a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ac:	2208      	movs	r2, #8
 80021ae:	409a      	lsls	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	2201      	movs	r2, #1
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	2201      	movs	r2, #1
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	f043 0202 	orr.w	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	2204      	movs	r2, #4
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d012      	beq.n	800222c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	2204      	movs	r2, #4
 800221a:	409a      	lsls	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	2210      	movs	r2, #16
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d043      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03c      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	2210      	movs	r2, #16
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d018      	beq.n	8002296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d024      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
 8002282:	e01f      	b.n	80022c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01b      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
 8002294:	e016      	b.n	80022c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0208 	bic.w	r2, r2, #8
 80022b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	2220      	movs	r2, #32
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 808f 	beq.w	80023f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8087 	beq.w	80023f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ea:	2220      	movs	r2, #32
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d136      	bne.n	800236c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0216 	bic.w	r2, r2, #22
 800230c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800231c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_DMA_IRQHandler+0x1da>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0208 	bic.w	r2, r2, #8
 800233c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	223f      	movs	r2, #63	@ 0x3f
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235e:	2b00      	cmp	r3, #0
 8002360:	d07e      	beq.n	8002460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
        }
        return;
 800236a:	e079      	b.n	8002460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	2b00      	cmp	r3, #0
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4798      	blx	r3
 8002398:	e02c      	b.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000
 80023a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
 80023b4:	e01e      	b.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0210 	bic.w	r2, r2, #16
 80023d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d032      	beq.n	8002462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2205      	movs	r2, #5
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	3301      	adds	r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	d307      	bcc.n	800243c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f2      	bne.n	8002420 <HAL_DMA_IRQHandler+0x2cc>
 800243a:	e000      	b.n	800243e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800243c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
 800245e:	e000      	b.n	8002462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002460:	bf00      	nop
    }
  }
}
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b40      	cmp	r3, #64	@ 0x40
 8002494:	d108      	bne.n	80024a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024a6:	e007      	b.n	80024b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	3b10      	subs	r3, #16
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <DMA_CalcBaseAndBitshift+0x64>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024de:	4a13      	ldr	r2, [pc, #76]	@ (800252c <DMA_CalcBaseAndBitshift+0x68>)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d909      	bls.n	8002506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	1d1a      	adds	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	659a      	str	r2, [r3, #88]	@ 0x58
 8002504:	e007      	b.n	8002516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	aaaaaaab 	.word	0xaaaaaaab
 800252c:	080079c0 	.word	0x080079c0

08002530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11f      	bne.n	800258a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d856      	bhi.n	80025fe <DMA_CheckFifoParam+0xce>
 8002550:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <DMA_CheckFifoParam+0x28>)
 8002552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002556:	bf00      	nop
 8002558:	08002569 	.word	0x08002569
 800255c:	0800257b 	.word	0x0800257b
 8002560:	08002569 	.word	0x08002569
 8002564:	080025ff 	.word	0x080025ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d046      	beq.n	8002602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e043      	b.n	8002602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002582:	d140      	bne.n	8002606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e03d      	b.n	8002606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002592:	d121      	bne.n	80025d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d837      	bhi.n	800260a <DMA_CheckFifoParam+0xda>
 800259a:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <DMA_CheckFifoParam+0x70>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025b7 	.word	0x080025b7
 80025a8:	080025b1 	.word	0x080025b1
 80025ac:	080025c9 	.word	0x080025c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e030      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d025      	beq.n	800260e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c6:	e022      	b.n	800260e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025d0:	d11f      	bne.n	8002612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025d6:	e01c      	b.n	8002612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d903      	bls.n	80025e6 <DMA_CheckFifoParam+0xb6>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d003      	beq.n	80025ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025e4:	e018      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ea:	e015      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00e      	beq.n	8002616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      break;
 80025fc:	e00b      	b.n	8002616 <DMA_CheckFifoParam+0xe6>
      break;
 80025fe:	bf00      	nop
 8002600:	e00a      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e008      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
 8002608:	e006      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
 800260c:	e004      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
 8002610:	e002      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;   
 8002612:	bf00      	nop
 8002614:	e000      	b.n	8002618 <DMA_CheckFifoParam+0xe8>
      break;
 8002616:	bf00      	nop
    }
  } 
  
  return status; 
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e159      	b.n	80028f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	429a      	cmp	r2, r3
 800265e:	f040 8148 	bne.w	80028f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d005      	beq.n	800267a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	2b02      	cmp	r3, #2
 8002678:	d130      	bne.n	80026dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 0201 	and.w	r2, r3, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d017      	beq.n	8002718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d123      	bne.n	800276c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	69b9      	ldr	r1, [r7, #24]
 8002768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a2 	beq.w	80028f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b57      	ldr	r3, [pc, #348]	@ (8002910 <HAL_GPIO_Init+0x2e8>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	4a56      	ldr	r2, [pc, #344]	@ (8002910 <HAL_GPIO_Init+0x2e8>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027be:	4b54      	ldr	r3, [pc, #336]	@ (8002910 <HAL_GPIO_Init+0x2e8>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ca:	4a52      	ldr	r2, [pc, #328]	@ (8002914 <HAL_GPIO_Init+0x2ec>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a49      	ldr	r2, [pc, #292]	@ (8002918 <HAL_GPIO_Init+0x2f0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x202>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a48      	ldr	r2, [pc, #288]	@ (800291c <HAL_GPIO_Init+0x2f4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x1fe>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a47      	ldr	r2, [pc, #284]	@ (8002920 <HAL_GPIO_Init+0x2f8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x1fa>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a46      	ldr	r2, [pc, #280]	@ (8002924 <HAL_GPIO_Init+0x2fc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x1f6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a45      	ldr	r2, [pc, #276]	@ (8002928 <HAL_GPIO_Init+0x300>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x1f2>
 8002816:	2304      	movs	r3, #4
 8002818:	e008      	b.n	800282c <HAL_GPIO_Init+0x204>
 800281a:	2307      	movs	r3, #7
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x204>
 800281e:	2303      	movs	r3, #3
 8002820:	e004      	b.n	800282c <HAL_GPIO_Init+0x204>
 8002822:	2302      	movs	r3, #2
 8002824:	e002      	b.n	800282c <HAL_GPIO_Init+0x204>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_GPIO_Init+0x204>
 800282a:	2300      	movs	r3, #0
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f002 0203 	and.w	r2, r2, #3
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	4093      	lsls	r3, r2
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800283c:	4935      	ldr	r1, [pc, #212]	@ (8002914 <HAL_GPIO_Init+0x2ec>)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	3302      	adds	r3, #2
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800284a:	4b38      	ldr	r3, [pc, #224]	@ (800292c <HAL_GPIO_Init+0x304>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286e:	4a2f      	ldr	r2, [pc, #188]	@ (800292c <HAL_GPIO_Init+0x304>)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002874:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <HAL_GPIO_Init+0x304>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002898:	4a24      	ldr	r2, [pc, #144]	@ (800292c <HAL_GPIO_Init+0x304>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289e:	4b23      	ldr	r3, [pc, #140]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c2:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ec:	4a0f      	ldr	r2, [pc, #60]	@ (800292c <HAL_GPIO_Init+0x304>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3301      	adds	r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	f67f aea2 	bls.w	8002644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3724      	adds	r7, #36	@ 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40013800 	.word	0x40013800
 8002918:	40020000 	.word	0x40020000
 800291c:	40020400 	.word	0x40020400
 8002920:	40020800 	.word	0x40020800
 8002924:	40020c00 	.word	0x40020c00
 8002928:	40021000 	.word	0x40021000
 800292c:	40013c00 	.word	0x40013c00

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e267      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d075      	beq.n	8002a6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002982:	4b88      	ldr	r3, [pc, #544]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b04      	cmp	r3, #4
 800298c:	d00c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298e:	4b85      	ldr	r3, [pc, #532]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002996:	2b08      	cmp	r3, #8
 8002998:	d112      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299a:	4b82      	ldr	r3, [pc, #520]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05b      	beq.n	8002a6c <HAL_RCC_OscConfig+0x108>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d157      	bne.n	8002a6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e242      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c8:	d106      	bne.n	80029d8 <HAL_RCC_OscConfig+0x74>
 80029ca:	4b76      	ldr	r3, [pc, #472]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a75      	ldr	r2, [pc, #468]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e01d      	b.n	8002a14 <HAL_RCC_OscConfig+0xb0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x98>
 80029e2:	4b70      	ldr	r3, [pc, #448]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6f      	ldr	r2, [pc, #444]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6c      	ldr	r2, [pc, #432]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0xb0>
 80029fc:	4b69      	ldr	r3, [pc, #420]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a68      	ldr	r2, [pc, #416]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b66      	ldr	r3, [pc, #408]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a65      	ldr	r2, [pc, #404]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fd8a 	bl	8001534 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe fd86 	bl	8001534 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	@ 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e207      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0xc0>
 8002a42:	e014      	b.n	8002a6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fd76 	bl	8001534 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fd72 	bl	8001534 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1f3      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	4b51      	ldr	r3, [pc, #324]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0xe8>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d063      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a86:	4b47      	ldr	r3, [pc, #284]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d11c      	bne.n	8002acc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a92:	4b44      	ldr	r3, [pc, #272]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d116      	bne.n	8002acc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x152>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e1c7      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4937      	ldr	r1, [pc, #220]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	e03a      	b.n	8002b42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad4:	4b34      	ldr	r3, [pc, #208]	@ (8002ba8 <HAL_RCC_OscConfig+0x244>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe fd2b 	bl	8001534 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae2:	f7fe fd27 	bl	8001534 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e1a8      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b28      	ldr	r3, [pc, #160]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4925      	ldr	r1, [pc, #148]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
 8002b14:	e015      	b.n	8002b42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b16:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_RCC_OscConfig+0x244>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fd0a 	bl	8001534 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b24:	f7fe fd06 	bl	8001534 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e187      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d036      	beq.n	8002bbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <HAL_RCC_OscConfig+0x248>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fcea 	bl	8001534 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fe fce6 	bl	8001534 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e167      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_RCC_OscConfig+0x240>)
 8002b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x200>
 8002b82:	e01b      	b.n	8002bbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x248>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fcd3 	bl	8001534 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	e00e      	b.n	8002bb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe fccf 	bl	8001534 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d907      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e150      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	42470000 	.word	0x42470000
 8002bac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	4b88      	ldr	r3, [pc, #544]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ea      	bne.n	8002b92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8097 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b81      	ldr	r3, [pc, #516]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b7d      	ldr	r3, [pc, #500]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bea:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b77      	ldr	r3, [pc, #476]	@ (8002dd8 <HAL_RCC_OscConfig+0x474>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d118      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c06:	4b74      	ldr	r3, [pc, #464]	@ (8002dd8 <HAL_RCC_OscConfig+0x474>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a73      	ldr	r2, [pc, #460]	@ (8002dd8 <HAL_RCC_OscConfig+0x474>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7fe fc8f 	bl	8001534 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1a:	f7fe fc8b 	bl	8001534 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e10c      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd8 <HAL_RCC_OscConfig+0x474>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2ea>
 8002c40:	4b64      	ldr	r3, [pc, #400]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	4a63      	ldr	r2, [pc, #396]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCC_OscConfig+0x324>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x30c>
 8002c56:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c62:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0x324>
 8002c70:	4b58      	ldr	r3, [pc, #352]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	4a57      	ldr	r2, [pc, #348]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7c:	4b55      	ldr	r3, [pc, #340]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c80:	4a54      	ldr	r2, [pc, #336]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe fc50 	bl	8001534 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fc4c 	bl	8001534 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0cb      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	4b49      	ldr	r3, [pc, #292]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ee      	beq.n	8002c98 <HAL_RCC_OscConfig+0x334>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fc3a 	bl	8001534 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fc36 	bl	8001534 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0b5      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cda:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ee      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cec:	4b39      	ldr	r3, [pc, #228]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	4a38      	ldr	r2, [pc, #224]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a1 	beq.w	8002e44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d02:	4b34      	ldr	r3, [pc, #208]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d05c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d141      	bne.n	8002d9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b31      	ldr	r3, [pc, #196]	@ (8002ddc <HAL_RCC_OscConfig+0x478>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fc0a 	bl	8001534 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fc06 	bl	8001534 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e087      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	491b      	ldr	r1, [pc, #108]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <HAL_RCC_OscConfig+0x478>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fbdf 	bl	8001534 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fbdb 	bl	8001534 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e05c      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x416>
 8002d98:	e054      	b.n	8002e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <HAL_RCC_OscConfig+0x478>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fbc8 	bl	8001534 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fbc4 	bl	8001534 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e045      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x444>
 8002dc6:	e03d      	b.n	8002e44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e038      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_RCC_OscConfig+0x4ec>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d028      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d121      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d11a      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0cc      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b68      	ldr	r3, [pc, #416]	@ (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d90c      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b65      	ldr	r3, [pc, #404]	@ (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b63      	ldr	r3, [pc, #396]	@ (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0b8      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea8:	4b59      	ldr	r3, [pc, #356]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a58      	ldr	r2, [pc, #352]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec0:	4b53      	ldr	r3, [pc, #332]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b50      	ldr	r3, [pc, #320]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	494d      	ldr	r1, [pc, #308]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d044      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b47      	ldr	r3, [pc, #284]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d119      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e07f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b3f      	ldr	r3, [pc, #252]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e067      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4934      	ldr	r1, [pc, #208]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f44:	f7fe faf6 	bl	8001534 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fe faf2 	bl	8001534 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e04f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d20c      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b22      	ldr	r3, [pc, #136]	@ (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b20      	ldr	r3, [pc, #128]	@ (800300c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e032      	b.n	8003002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa8:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4916      	ldr	r1, [pc, #88]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc6:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	490e      	ldr	r1, [pc, #56]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fda:	f000 f821 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	490a      	ldr	r1, [pc, #40]	@ (8003014 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	5ccb      	ldrb	r3, [r1, r3]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a09      	ldr	r2, [pc, #36]	@ (8003018 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	@ (800301c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe f968 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023c00 	.word	0x40023c00
 8003010:	40023800 	.word	0x40023800
 8003014:	080079a8 	.word	0x080079a8
 8003018:	20000000 	.word	0x20000000
 800301c:	20000004 	.word	0x20000004

08003020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003024:	b094      	sub	sp, #80	@ 0x50
 8003026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003038:	4b79      	ldr	r3, [pc, #484]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x200>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d00d      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x40>
 8003044:	2b08      	cmp	r3, #8
 8003046:	f200 80e1 	bhi.w	800320c <HAL_RCC_GetSysClockFreq+0x1ec>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x34>
 800304e:	2b04      	cmp	r3, #4
 8003050:	d003      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0x3a>
 8003052:	e0db      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003054:	4b73      	ldr	r3, [pc, #460]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x204>)
 8003056:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003058:	e0db      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305a:	4b73      	ldr	r3, [pc, #460]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x208>)
 800305c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800305e:	e0d8      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003060:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x200>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003068:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306a:	4b6d      	ldr	r3, [pc, #436]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x200>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d063      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003076:	4b6a      	ldr	r3, [pc, #424]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x200>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	099b      	lsrs	r3, r3, #6
 800307c:	2200      	movs	r2, #0
 800307e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003080:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003088:	633b      	str	r3, [r7, #48]	@ 0x30
 800308a:	2300      	movs	r3, #0
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
 800308e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003092:	4622      	mov	r2, r4
 8003094:	462b      	mov	r3, r5
 8003096:	f04f 0000 	mov.w	r0, #0
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	0159      	lsls	r1, r3, #5
 80030a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a4:	0150      	lsls	r0, r2, #5
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4621      	mov	r1, r4
 80030ac:	1a51      	subs	r1, r2, r1
 80030ae:	6139      	str	r1, [r7, #16]
 80030b0:	4629      	mov	r1, r5
 80030b2:	eb63 0301 	sbc.w	r3, r3, r1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c4:	4659      	mov	r1, fp
 80030c6:	018b      	lsls	r3, r1, #6
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ce:	4651      	mov	r1, sl
 80030d0:	018a      	lsls	r2, r1, #6
 80030d2:	4651      	mov	r1, sl
 80030d4:	ebb2 0801 	subs.w	r8, r2, r1
 80030d8:	4659      	mov	r1, fp
 80030da:	eb63 0901 	sbc.w	r9, r3, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	eb18 0303 	adds.w	r3, r8, r3
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	462b      	mov	r3, r5
 8003100:	eb49 0303 	adc.w	r3, r9, r3
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003112:	4629      	mov	r1, r5
 8003114:	024b      	lsls	r3, r1, #9
 8003116:	4621      	mov	r1, r4
 8003118:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800311c:	4621      	mov	r1, r4
 800311e:	024a      	lsls	r2, r1, #9
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003126:	2200      	movs	r2, #0
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800312a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800312c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003130:	f7fd f856 	bl	80001e0 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4613      	mov	r3, r2
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800313c:	e058      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b38      	ldr	r3, [pc, #224]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x200>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	2200      	movs	r2, #0
 8003146:	4618      	mov	r0, r3
 8003148:	4611      	mov	r1, r2
 800314a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800314e:	623b      	str	r3, [r7, #32]
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
 8003154:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	f04f 0000 	mov.w	r0, #0
 8003160:	f04f 0100 	mov.w	r1, #0
 8003164:	0159      	lsls	r1, r3, #5
 8003166:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316a:	0150      	lsls	r0, r2, #5
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4641      	mov	r1, r8
 8003172:	ebb2 0a01 	subs.w	sl, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb63 0b01 	sbc.w	fp, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003188:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800318c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003190:	ebb2 040a 	subs.w	r4, r2, sl
 8003194:	eb63 050b 	sbc.w	r5, r3, fp
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	00eb      	lsls	r3, r5, #3
 80031a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a6:	00e2      	lsls	r2, r4, #3
 80031a8:	4614      	mov	r4, r2
 80031aa:	461d      	mov	r5, r3
 80031ac:	4643      	mov	r3, r8
 80031ae:	18e3      	adds	r3, r4, r3
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	464b      	mov	r3, r9
 80031b4:	eb45 0303 	adc.w	r3, r5, r3
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031c6:	4629      	mov	r1, r5
 80031c8:	028b      	lsls	r3, r1, #10
 80031ca:	4621      	mov	r1, r4
 80031cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d0:	4621      	mov	r1, r4
 80031d2:	028a      	lsls	r2, r1, #10
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031da:	2200      	movs	r2, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	61fa      	str	r2, [r7, #28]
 80031e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e4:	f7fc fffc 	bl	80001e0 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4613      	mov	r3, r2
 80031ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	3301      	adds	r3, #1
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003200:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x204>)
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003214:	4618      	mov	r0, r3
 8003216:	3750      	adds	r7, #80	@ 0x50
 8003218:	46bd      	mov	sp, r7
 800321a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	00f42400 	.word	0x00f42400
 8003228:	007a1200 	.word	0x007a1200

0800322c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b03      	ldr	r3, [pc, #12]	@ (8003240 <HAL_RCC_GetHCLKFreq+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003248:	f7ff fff0 	bl	800322c <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0a9b      	lsrs	r3, r3, #10
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	@ (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	080079b8 	.word	0x080079b8

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003270:	f7ff ffdc 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0b5b      	lsrs	r3, r3, #13
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4903      	ldr	r1, [pc, #12]	@ (8003290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	080079b8 	.word	0x080079b8

08003294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	220f      	movs	r2, #15
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032a4:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032c8:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	08db      	lsrs	r3, r3, #3
 80032ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032d6:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <HAL_RCC_GetClockConfig+0x60>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0207 	and.w	r2, r3, #7
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	601a      	str	r2, [r3, #0]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40023c00 	.word	0x40023c00

080032f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fef2 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fdea 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e044      	b.n	800343a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003448 <HAL_TIM_Base_Start_IT+0xb0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d018      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x6c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033da:	d013      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x6c>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1a      	ldr	r2, [pc, #104]	@ (800344c <HAL_TIM_Base_Start_IT+0xb4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x6c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <HAL_TIM_Base_Start_IT+0xb8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x6c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <HAL_TIM_Base_Start_IT+0xbc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0x6c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <HAL_TIM_Base_Start_IT+0xc0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d111      	bne.n	8003428 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d010      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	e007      	b.n	8003438 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40014000 	.word	0x40014000

0800345c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e041      	b.n	80034f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f839 	bl	80034fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 fd38 	bl	8003f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <HAL_TIM_PWM_Start+0x24>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e022      	b.n	800357a <HAL_TIM_PWM_Start+0x6a>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d109      	bne.n	800354e <HAL_TIM_PWM_Start+0x3e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e015      	b.n	800357a <HAL_TIM_PWM_Start+0x6a>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d109      	bne.n	8003568 <HAL_TIM_PWM_Start+0x58>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e008      	b.n	800357a <HAL_TIM_PWM_Start+0x6a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e068      	b.n	8003654 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_TIM_PWM_Start+0x82>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003590:	e013      	b.n	80035ba <HAL_TIM_PWM_Start+0xaa>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x92>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_PWM_Start+0xaa>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xa2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b0:	e003      	b.n	80035ba <HAL_TIM_PWM_Start+0xaa>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2201      	movs	r2, #1
 80035c0:	6839      	ldr	r1, [r7, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 ff56 	bl	8004474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a23      	ldr	r2, [pc, #140]	@ (800365c <HAL_TIM_PWM_Start+0x14c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d107      	bne.n	80035e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1d      	ldr	r2, [pc, #116]	@ (800365c <HAL_TIM_PWM_Start+0x14c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_TIM_PWM_Start+0x10e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f4:	d013      	beq.n	800361e <HAL_TIM_PWM_Start+0x10e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a19      	ldr	r2, [pc, #100]	@ (8003660 <HAL_TIM_PWM_Start+0x150>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_TIM_PWM_Start+0x10e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a17      	ldr	r2, [pc, #92]	@ (8003664 <HAL_TIM_PWM_Start+0x154>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_TIM_PWM_Start+0x10e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a16      	ldr	r2, [pc, #88]	@ (8003668 <HAL_TIM_PWM_Start+0x158>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIM_PWM_Start+0x10e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a14      	ldr	r2, [pc, #80]	@ (800366c <HAL_TIM_PWM_Start+0x15c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d111      	bne.n	8003642 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b06      	cmp	r3, #6
 800362e:	d010      	beq.n	8003652 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	e007      	b.n	8003652 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40010000 	.word	0x40010000
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800
 8003668:	40000c00 	.word	0x40000c00
 800366c:	40014000 	.word	0x40014000

08003670 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	6839      	ldr	r1, [r7, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fef6 	bl	8004474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a29      	ldr	r2, [pc, #164]	@ (8003734 <HAL_TIM_PWM_Stop+0xc4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d117      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	f241 1311 	movw	r3, #4369	@ 0x1111
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0x52>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
 80036a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0x52>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_TIM_PWM_Stop+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_PWM_Stop+0x82>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_PWM_Stop+0x92>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003700:	e013      	b.n	800372a <HAL_TIM_PWM_Stop+0xba>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Stop+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003710:	e00b      	b.n	800372a <HAL_TIM_PWM_Stop+0xba>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d104      	bne.n	8003722 <HAL_TIM_PWM_Stop+0xb2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003720:	e003      	b.n	800372a <HAL_TIM_PWM_Stop+0xba>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40010000 	.word	0x40010000

08003738 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e097      	b.n	800387c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd fc43 	bl	8000fec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800377c:	f023 0307 	bic.w	r3, r3, #7
 8003780:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 fbbf 	bl	8003f10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	4313      	orrs	r3, r2
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037d8:	f023 030c 	bic.w	r3, r3, #12
 80037dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	4313      	orrs	r3, r2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	011a      	lsls	r2, r3, #4
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	031b      	lsls	r3, r3, #12
 8003808:	4313      	orrs	r3, r2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	4313      	orrs	r3, r2
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003894:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800389c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d110      	bne.n	80038d6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ba:	7b7b      	ldrb	r3, [r7, #13]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e089      	b.n	80039d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d4:	e031      	b.n	800393a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d110      	bne.n	80038fe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038e2:	7b3b      	ldrb	r3, [r7, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d001      	beq.n	80038ec <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e075      	b.n	80039d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038fc:	e01d      	b.n	800393a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d108      	bne.n	8003916 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800390a:	7b7b      	ldrb	r3, [r7, #13]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003910:	7b3b      	ldrb	r3, [r7, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e05e      	b.n	80039d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d010      	beq.n	8003968 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003946:	e01f      	b.n	8003988 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2201      	movs	r2, #1
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fd8f 	bl	8004474 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0202 	orr.w	r2, r2, #2
 8003964:	60da      	str	r2, [r3, #12]
      break;
 8003966:	e02e      	b.n	80039c6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	2104      	movs	r1, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fd7f 	bl	8004474 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0204 	orr.w	r2, r2, #4
 8003984:	60da      	str	r2, [r3, #12]
      break;
 8003986:	e01e      	b.n	80039c6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fd6f 	bl	8004474 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2201      	movs	r2, #1
 800399c:	2104      	movs	r1, #4
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd68 	bl	8004474 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0202 	orr.w	r2, r2, #2
 80039b2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0204 	orr.w	r2, r2, #4
 80039c2:	60da      	str	r2, [r3, #12]
      break;
 80039c4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d020      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0202 	mvn.w	r2, #2
 8003a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fc fd7e 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa4d 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fa54 	bl	8003ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d020      	beq.n	8003a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0204 	mvn.w	r2, #4
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fc fd58 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa27 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa2e 	bl	8003ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d020      	beq.n	8003adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01b      	beq.n	8003adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0208 	mvn.w	r2, #8
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fc fd32 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa01 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fa08 	bl	8003ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d020      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0210 	mvn.w	r2, #16
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2208      	movs	r2, #8
 8003afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fc fd0c 	bl	800052c <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9db 	bl	8003ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f9e2 	bl	8003ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00c      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0201 	mvn.w	r2, #1
 8003b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd f974 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00c      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fd20 	bl	80045b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f9b3 	bl	8003efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0220 	mvn.w	r2, #32
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fcf2 	bl	800459c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0ae      	b.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b0c      	cmp	r3, #12
 8003bea:	f200 809f 	bhi.w	8003d2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bee:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003d2d 	.word	0x08003d2d
 8003bfc:	08003d2d 	.word	0x08003d2d
 8003c00:	08003d2d 	.word	0x08003d2d
 8003c04:	08003c69 	.word	0x08003c69
 8003c08:	08003d2d 	.word	0x08003d2d
 8003c0c:	08003d2d 	.word	0x08003d2d
 8003c10:	08003d2d 	.word	0x08003d2d
 8003c14:	08003cab 	.word	0x08003cab
 8003c18:	08003d2d 	.word	0x08003d2d
 8003c1c:	08003d2d 	.word	0x08003d2d
 8003c20:	08003d2d 	.word	0x08003d2d
 8003c24:	08003ceb 	.word	0x08003ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f9fa 	bl	8004028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0208 	orr.w	r2, r2, #8
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	619a      	str	r2, [r3, #24]
      break;
 8003c66:	e064      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fa40 	bl	80040f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6999      	ldr	r1, [r3, #24]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]
      break;
 8003ca8:	e043      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fa8b 	bl	80041cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0208 	orr.w	r2, r2, #8
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0204 	bic.w	r2, r2, #4
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	61da      	str	r2, [r3, #28]
      break;
 8003ce8:	e023      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fad5 	bl	80042a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	61da      	str	r2, [r3, #28]
      break;
 8003d2a:	e002      	b.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIM_ConfigClockSource+0x1c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e0b4      	b.n	8003eca <HAL_TIM_ConfigClockSource+0x186>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d98:	d03e      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0xd4>
 8003d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d9e:	f200 8087 	bhi.w	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da6:	f000 8086 	beq.w	8003eb6 <HAL_TIM_ConfigClockSource+0x172>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dae:	d87f      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b70      	cmp	r3, #112	@ 0x70
 8003db2:	d01a      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0xa6>
 8003db4:	2b70      	cmp	r3, #112	@ 0x70
 8003db6:	d87b      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b60      	cmp	r3, #96	@ 0x60
 8003dba:	d050      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x11a>
 8003dbc:	2b60      	cmp	r3, #96	@ 0x60
 8003dbe:	d877      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b50      	cmp	r3, #80	@ 0x50
 8003dc2:	d03c      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xfa>
 8003dc4:	2b50      	cmp	r3, #80	@ 0x50
 8003dc6:	d873      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b40      	cmp	r3, #64	@ 0x40
 8003dca:	d058      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x13a>
 8003dcc:	2b40      	cmp	r3, #64	@ 0x40
 8003dce:	d86f      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b30      	cmp	r3, #48	@ 0x30
 8003dd2:	d064      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15a>
 8003dd4:	2b30      	cmp	r3, #48	@ 0x30
 8003dd6:	d86b      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d060      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d867      	bhi.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05c      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d05a      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x15a>
 8003de8:	e062      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dfa:	f000 fb1b 	bl	8004434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	609a      	str	r2, [r3, #8]
      break;
 8003e16:	e04f      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e28:	f000 fb04 	bl	8004434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e3a:	609a      	str	r2, [r3, #8]
      break;
 8003e3c:	e03c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f000 fa78 	bl	8004340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2150      	movs	r1, #80	@ 0x50
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fad1 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003e5c:	e02c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f000 fa97 	bl	800439e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2160      	movs	r1, #96	@ 0x60
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fac1 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003e7c:	e01c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f000 fa58 	bl	8004340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2140      	movs	r1, #64	@ 0x40
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fab1 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003e9c:	e00c      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f000 faa8 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003eae:	e003      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb4:	e000      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3a      	ldr	r2, [pc, #232]	@ (800400c <TIM_Base_SetConfig+0xfc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00f      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f2e:	d00b      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a37      	ldr	r2, [pc, #220]	@ (8004010 <TIM_Base_SetConfig+0x100>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a36      	ldr	r2, [pc, #216]	@ (8004014 <TIM_Base_SetConfig+0x104>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a35      	ldr	r2, [pc, #212]	@ (8004018 <TIM_Base_SetConfig+0x108>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d108      	bne.n	8003f5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800400c <TIM_Base_SetConfig+0xfc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01b      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f68:	d017      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	@ (8004010 <TIM_Base_SetConfig+0x100>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a27      	ldr	r2, [pc, #156]	@ (8004014 <TIM_Base_SetConfig+0x104>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	@ (8004018 <TIM_Base_SetConfig+0x108>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a25      	ldr	r2, [pc, #148]	@ (800401c <TIM_Base_SetConfig+0x10c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a24      	ldr	r2, [pc, #144]	@ (8004020 <TIM_Base_SetConfig+0x110>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a23      	ldr	r2, [pc, #140]	@ (8004024 <TIM_Base_SetConfig+0x114>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d108      	bne.n	8003fac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800400c <TIM_Base_SetConfig+0xfc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d103      	bne.n	8003fe0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	611a      	str	r2, [r3, #16]
  }
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40014000 	.word	0x40014000
 8004020:	40014400 	.word	0x40014400
 8004024:	40014800 	.word	0x40014800

08004028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 0201 	bic.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 0302 	bic.w	r3, r3, #2
 8004070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1c      	ldr	r2, [pc, #112]	@ (80040f0 <TIM_OC1_SetConfig+0xc8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d10c      	bne.n	800409e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0308 	bic.w	r3, r3, #8
 800408a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <TIM_OC1_SetConfig+0xc8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40010000 	.word	0x40010000

080040f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f023 0210 	bic.w	r2, r3, #16
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0320 	bic.w	r3, r3, #32
 800413e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a1e      	ldr	r2, [pc, #120]	@ (80041c8 <TIM_OC2_SetConfig+0xd4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10d      	bne.n	8004170 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a15      	ldr	r2, [pc, #84]	@ (80041c8 <TIM_OC2_SetConfig+0xd4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d113      	bne.n	80041a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800417e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000

080041cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1d      	ldr	r2, [pc, #116]	@ (800429c <TIM_OC3_SetConfig+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10d      	bne.n	8004246 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a14      	ldr	r2, [pc, #80]	@ (800429c <TIM_OC3_SetConfig+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d113      	bne.n	8004276 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40010000 	.word	0x40010000

080042a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a10      	ldr	r2, [pc, #64]	@ (800433c <TIM_OC4_SetConfig+0x9c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000

08004340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f023 0201 	bic.w	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800436a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 030a 	bic.w	r3, r3, #10
 800437c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	f023 0210 	bic.w	r2, r3, #16
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	f043 0307 	orr.w	r3, r3, #7
 8004420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	431a      	orrs	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2201      	movs	r2, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e050      	b.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1c      	ldr	r2, [pc, #112]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004524:	d013      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a13      	ldr	r2, [pc, #76]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10c      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40014000 	.word	0x40014000

0800459c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e042      	b.n	800465c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fe28 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	@ 0x24
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f82b 	bl	8004664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800461c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800462c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800463c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b0c0      	sub	sp, #256	@ 0x100
 800466a:	af00      	add	r7, sp, #0
 800466c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	68d9      	ldr	r1, [r3, #12]
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	ea40 0301 	orr.w	r3, r0, r1
 800468c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	431a      	orrs	r2, r3
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046bc:	f021 010c 	bic.w	r1, r1, #12
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046ca:	430b      	orrs	r3, r1
 80046cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	6999      	ldr	r1, [r3, #24]
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	ea40 0301 	orr.w	r3, r0, r1
 80046ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004930 <UART_SetConfig+0x2cc>)
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d005      	beq.n	8004704 <UART_SetConfig+0xa0>
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004934 <UART_SetConfig+0x2d0>)
 8004700:	429a      	cmp	r2, r3
 8004702:	d104      	bne.n	800470e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004704:	f7fe fdb2 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 8004708:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800470c:	e003      	b.n	8004716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800470e:	f7fe fd99 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004712:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004720:	f040 810c 	bne.w	800493c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004728:	2200      	movs	r2, #0
 800472a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800472e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	1891      	adds	r1, r2, r2
 800473c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800473e:	415b      	adcs	r3, r3
 8004740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004746:	4621      	mov	r1, r4
 8004748:	eb12 0801 	adds.w	r8, r2, r1
 800474c:	4629      	mov	r1, r5
 800474e:	eb43 0901 	adc.w	r9, r3, r1
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800475e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004766:	4690      	mov	r8, r2
 8004768:	4699      	mov	r9, r3
 800476a:	4623      	mov	r3, r4
 800476c:	eb18 0303 	adds.w	r3, r8, r3
 8004770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004774:	462b      	mov	r3, r5
 8004776:	eb49 0303 	adc.w	r3, r9, r3
 800477a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800478a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800478e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004792:	460b      	mov	r3, r1
 8004794:	18db      	adds	r3, r3, r3
 8004796:	653b      	str	r3, [r7, #80]	@ 0x50
 8004798:	4613      	mov	r3, r2
 800479a:	eb42 0303 	adc.w	r3, r2, r3
 800479e:	657b      	str	r3, [r7, #84]	@ 0x54
 80047a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047a8:	f7fb fd1a 	bl	80001e0 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4b61      	ldr	r3, [pc, #388]	@ (8004938 <UART_SetConfig+0x2d4>)
 80047b2:	fba3 2302 	umull	r2, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	011c      	lsls	r4, r3, #4
 80047ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047cc:	4642      	mov	r2, r8
 80047ce:	464b      	mov	r3, r9
 80047d0:	1891      	adds	r1, r2, r2
 80047d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047d4:	415b      	adcs	r3, r3
 80047d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047dc:	4641      	mov	r1, r8
 80047de:	eb12 0a01 	adds.w	sl, r2, r1
 80047e2:	4649      	mov	r1, r9
 80047e4:	eb43 0b01 	adc.w	fp, r3, r1
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047fc:	4692      	mov	sl, r2
 80047fe:	469b      	mov	fp, r3
 8004800:	4643      	mov	r3, r8
 8004802:	eb1a 0303 	adds.w	r3, sl, r3
 8004806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800480a:	464b      	mov	r3, r9
 800480c:	eb4b 0303 	adc.w	r3, fp, r3
 8004810:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004820:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004828:	460b      	mov	r3, r1
 800482a:	18db      	adds	r3, r3, r3
 800482c:	643b      	str	r3, [r7, #64]	@ 0x40
 800482e:	4613      	mov	r3, r2
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	647b      	str	r3, [r7, #68]	@ 0x44
 8004836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800483a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800483e:	f7fb fccf 	bl	80001e0 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4611      	mov	r1, r2
 8004848:	4b3b      	ldr	r3, [pc, #236]	@ (8004938 <UART_SetConfig+0x2d4>)
 800484a:	fba3 2301 	umull	r2, r3, r3, r1
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2264      	movs	r2, #100	@ 0x64
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	1acb      	subs	r3, r1, r3
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800485e:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <UART_SetConfig+0x2d4>)
 8004860:	fba3 2302 	umull	r2, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800486c:	441c      	add	r4, r3
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004878:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800487c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004888:	415b      	adcs	r3, r3
 800488a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800488c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004890:	4641      	mov	r1, r8
 8004892:	1851      	adds	r1, r2, r1
 8004894:	6339      	str	r1, [r7, #48]	@ 0x30
 8004896:	4649      	mov	r1, r9
 8004898:	414b      	adcs	r3, r1
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048a8:	4659      	mov	r1, fp
 80048aa:	00cb      	lsls	r3, r1, #3
 80048ac:	4651      	mov	r1, sl
 80048ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b2:	4651      	mov	r1, sl
 80048b4:	00ca      	lsls	r2, r1, #3
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	4642      	mov	r2, r8
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048c4:	464b      	mov	r3, r9
 80048c6:	460a      	mov	r2, r1
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048e4:	460b      	mov	r3, r1
 80048e6:	18db      	adds	r3, r3, r3
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ea:	4613      	mov	r3, r2
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048fa:	f7fb fc71 	bl	80001e0 <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <UART_SetConfig+0x2d4>)
 8004904:	fba3 1302 	umull	r1, r3, r3, r2
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	2164      	movs	r1, #100	@ 0x64
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	3332      	adds	r3, #50	@ 0x32
 8004916:	4a08      	ldr	r2, [pc, #32]	@ (8004938 <UART_SetConfig+0x2d4>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	f003 0207 	and.w	r2, r3, #7
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4422      	add	r2, r4
 800492a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800492c:	e106      	b.n	8004b3c <UART_SetConfig+0x4d8>
 800492e:	bf00      	nop
 8004930:	40011000 	.word	0x40011000
 8004934:	40011400 	.word	0x40011400
 8004938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800493c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004940:	2200      	movs	r2, #0
 8004942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004946:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800494a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800494e:	4642      	mov	r2, r8
 8004950:	464b      	mov	r3, r9
 8004952:	1891      	adds	r1, r2, r2
 8004954:	6239      	str	r1, [r7, #32]
 8004956:	415b      	adcs	r3, r3
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
 800495a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800495e:	4641      	mov	r1, r8
 8004960:	1854      	adds	r4, r2, r1
 8004962:	4649      	mov	r1, r9
 8004964:	eb43 0501 	adc.w	r5, r3, r1
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	00eb      	lsls	r3, r5, #3
 8004972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	4643      	mov	r3, r8
 800497e:	18e3      	adds	r3, r4, r3
 8004980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004984:	464b      	mov	r3, r9
 8004986:	eb45 0303 	adc.w	r3, r5, r3
 800498a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800499a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049aa:	4629      	mov	r1, r5
 80049ac:	008b      	lsls	r3, r1, #2
 80049ae:	4621      	mov	r1, r4
 80049b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b4:	4621      	mov	r1, r4
 80049b6:	008a      	lsls	r2, r1, #2
 80049b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049bc:	f7fb fc10 	bl	80001e0 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4b60      	ldr	r3, [pc, #384]	@ (8004b48 <UART_SetConfig+0x4e4>)
 80049c6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	011c      	lsls	r4, r3, #4
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	61b9      	str	r1, [r7, #24]
 80049e8:	415b      	adcs	r3, r3
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6139      	str	r1, [r7, #16]
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a24:	464b      	mov	r3, r9
 8004a26:	460a      	mov	r2, r1
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a48:	4649      	mov	r1, r9
 8004a4a:	008b      	lsls	r3, r1, #2
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a52:	4641      	mov	r1, r8
 8004a54:	008a      	lsls	r2, r1, #2
 8004a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a5a:	f7fb fbc1 	bl	80001e0 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	4b38      	ldr	r3, [pc, #224]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004a66:	fba3 2301 	umull	r2, r3, r3, r1
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2264      	movs	r2, #100	@ 0x64
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	1acb      	subs	r3, r1, r3
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	3332      	adds	r3, #50	@ 0x32
 8004a78:	4a33      	ldr	r2, [pc, #204]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a84:	441c      	add	r4, r3
 8004a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	460a      	mov	r2, r1
 8004ada:	eb42 0303 	adc.w	r3, r2, r3
 8004ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004af8:	4649      	mov	r1, r9
 8004afa:	008b      	lsls	r3, r1, #2
 8004afc:	4641      	mov	r1, r8
 8004afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b02:	4641      	mov	r1, r8
 8004b04:	008a      	lsls	r2, r1, #2
 8004b06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b0a:	f7fb fb69 	bl	80001e0 <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004b14:	fba3 1302 	umull	r1, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	2164      	movs	r1, #100	@ 0x64
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	3332      	adds	r3, #50	@ 0x32
 8004b26:	4a08      	ldr	r2, [pc, #32]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	f003 020f 	and.w	r2, r3, #15
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4422      	add	r2, r4
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b42:	46bd      	mov	sp, r7
 8004b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b48:	51eb851f 	.word	0x51eb851f

08004b4c <__NVIC_SetPriority>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	db0a      	blt.n	8004b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	490c      	ldr	r1, [pc, #48]	@ (8004b98 <__NVIC_SetPriority+0x4c>)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	0112      	lsls	r2, r2, #4
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	440b      	add	r3, r1
 8004b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b74:	e00a      	b.n	8004b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4908      	ldr	r1, [pc, #32]	@ (8004b9c <__NVIC_SetPriority+0x50>)
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	3b04      	subs	r3, #4
 8004b84:	0112      	lsls	r2, r2, #4
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	440b      	add	r3, r1
 8004b8a:	761a      	strb	r2, [r3, #24]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000e100 	.word	0xe000e100
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ba4:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <SysTick_Handler+0x1c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ba8:	f001 fd46 	bl	8006638 <xTaskGetSchedulerState>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bb2:	f002 fb41 	bl	8007238 <xPortSysTickHandler>
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	e000e010 	.word	0xe000e010

08004bc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	f06f 0004 	mvn.w	r0, #4
 8004bca:	f7ff ffbf 	bl	8004b4c <__NVIC_SetPriority>
#endif
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bda:	f3ef 8305 	mrs	r3, IPSR
 8004bde:	603b      	str	r3, [r7, #0]
  return(result);
 8004be0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004be6:	f06f 0305 	mvn.w	r3, #5
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	e00c      	b.n	8004c08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bee:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <osKernelInitialize+0x44>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d105      	bne.n	8004c02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bf6:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <osKernelInitialize+0x44>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	e002      	b.n	8004c08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c08:	687b      	ldr	r3, [r7, #4]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	200002b0 	.word	0x200002b0

08004c1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c22:	f3ef 8305 	mrs	r3, IPSR
 8004c26:	603b      	str	r3, [r7, #0]
  return(result);
 8004c28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c2e:	f06f 0305 	mvn.w	r3, #5
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	e010      	b.n	8004c58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <osKernelStart+0x48>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d109      	bne.n	8004c52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c3e:	f7ff ffbf 	bl	8004bc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c42:	4b08      	ldr	r3, [pc, #32]	@ (8004c64 <osKernelStart+0x48>)
 8004c44:	2202      	movs	r2, #2
 8004c46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c48:	f001 f892 	bl	8005d70 <vTaskStartScheduler>
      stat = osOK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	e002      	b.n	8004c58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c58:	687b      	ldr	r3, [r7, #4]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200002b0 	.word	0x200002b0

08004c68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08e      	sub	sp, #56	@ 0x38
 8004c6c:	af04      	add	r7, sp, #16
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c78:	f3ef 8305 	mrs	r3, IPSR
 8004c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d17e      	bne.n	8004d82 <osThreadNew+0x11a>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d07b      	beq.n	8004d82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c8a:	2380      	movs	r3, #128	@ 0x80
 8004c8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c8e:	2318      	movs	r3, #24
 8004c90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d045      	beq.n	8004d2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <osThreadNew+0x48>
        name = attr->name;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <osThreadNew+0x6e>
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2b38      	cmp	r3, #56	@ 0x38
 8004cc8:	d805      	bhi.n	8004cd6 <osThreadNew+0x6e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <osThreadNew+0x72>
        return (NULL);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e054      	b.n	8004d84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	089b      	lsrs	r3, r3, #2
 8004ce8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <osThreadNew+0xa8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2ba7      	cmp	r3, #167	@ 0xa7
 8004cf8:	d90a      	bls.n	8004d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <osThreadNew+0xa8>
        mem = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e010      	b.n	8004d32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10c      	bne.n	8004d32 <osThreadNew+0xca>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d108      	bne.n	8004d32 <osThreadNew+0xca>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <osThreadNew+0xca>
          mem = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	e001      	b.n	8004d32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d110      	bne.n	8004d5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d40:	9202      	str	r2, [sp, #8]
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6a3a      	ldr	r2, [r7, #32]
 8004d4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fe1a 	bl	8005988 <xTaskCreateStatic>
 8004d54:	4603      	mov	r3, r0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	e013      	b.n	8004d82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d110      	bne.n	8004d82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	f107 0310 	add.w	r3, r7, #16
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fe68 	bl	8005a48 <xTaskCreate>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d001      	beq.n	8004d82 <osThreadNew+0x11a>
            hTask = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d82:	693b      	ldr	r3, [r7, #16]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3728      	adds	r7, #40	@ 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d94:	f3ef 8305 	mrs	r3, IPSR
 8004d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <osDelay+0x1c>
    stat = osErrorISR;
 8004da0:	f06f 0305 	mvn.w	r3, #5
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e007      	b.n	8004db8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 ffa6 	bl	8005d04 <vTaskDelay>
    }
  }

  return (stat);
 8004db8:	68fb      	ldr	r3, [r7, #12]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a07      	ldr	r2, [pc, #28]	@ (8004df0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a06      	ldr	r2, [pc, #24]	@ (8004df4 <vApplicationGetIdleTaskMemory+0x30>)
 8004dda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	200002b4 	.word	0x200002b4
 8004df4:	2000035c 	.word	0x2000035c

08004df8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a07      	ldr	r2, [pc, #28]	@ (8004e24 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a06      	ldr	r2, [pc, #24]	@ (8004e28 <vApplicationGetTimerTaskMemory+0x30>)
 8004e0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e16:	601a      	str	r2, [r3, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	2000055c 	.word	0x2000055c
 8004e28:	20000604 	.word	0x20000604

08004e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f103 0208 	add.w	r2, r3, #8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f103 0208 	add.w	r2, r3, #8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f103 0208 	add.w	r2, r3, #8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ee4:	d103      	bne.n	8004eee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e00c      	b.n	8004f08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e002      	b.n	8004efc <vListInsert+0x2e>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d2f6      	bcs.n	8004ef6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6892      	ldr	r2, [r2, #8]
 8004f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6852      	ldr	r2, [r2, #4]
 8004f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d103      	bne.n	8004f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1e5a      	subs	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fc0:	f002 f8aa 	bl	8007118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	68f9      	ldr	r1, [r7, #12]
 8004fce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	441a      	add	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	22ff      	movs	r2, #255	@ 0xff
 8005004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	22ff      	movs	r2, #255	@ 0xff
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d114      	bne.n	8005040 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01a      	beq.n	8005054 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3310      	adds	r3, #16
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f942 	bl	80062ac <xTaskRemoveFromEventList>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d012      	beq.n	8005054 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <xQueueGenericReset+0xd0>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	e009      	b.n	8005054 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3310      	adds	r3, #16
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fef1 	bl	8004e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3324      	adds	r3, #36	@ 0x24
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff feec 	bl	8004e2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005054:	f002 f892 	bl	800717c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005058:	2301      	movs	r3, #1
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	@ 0x38
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <xQueueGenericCreateStatic+0x56>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <xQueueGenericCreateStatic+0x5a>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <xQueueGenericCreateStatic+0x5c>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	623b      	str	r3, [r7, #32]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <xQueueGenericCreateStatic+0x84>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <xQueueGenericCreateStatic+0x88>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <xQueueGenericCreateStatic+0x8a>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	61fb      	str	r3, [r7, #28]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800510e:	2350      	movs	r3, #80	@ 0x50
 8005110:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b50      	cmp	r3, #80	@ 0x50
 8005116:	d00b      	beq.n	8005130 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	61bb      	str	r3, [r7, #24]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005130:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005144:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f805 	bl	8005162 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800515a:	4618      	mov	r0, r3
 800515c:	3730      	adds	r7, #48	@ 0x30
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e002      	b.n	8005184 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005190:	2101      	movs	r1, #1
 8005192:	69b8      	ldr	r0, [r7, #24]
 8005194:	f7ff fefe 	bl	8004f94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08e      	sub	sp, #56	@ 0x38
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051b6:	2300      	movs	r3, #0
 80051b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueGenericSend+0x34>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <xQueueGenericSend+0x42>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <xQueueGenericSend+0x46>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <xQueueGenericSend+0x48>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xQueueGenericSend+0x64>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d103      	bne.n	800521a <xQueueGenericSend+0x72>
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <xQueueGenericSend+0x76>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <xQueueGenericSend+0x78>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <xQueueGenericSend+0x94>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	623b      	str	r3, [r7, #32]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800523c:	f001 f9fc 	bl	8006638 <xTaskGetSchedulerState>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <xQueueGenericSend+0xa4>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <xQueueGenericSend+0xa8>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <xQueueGenericSend+0xaa>
 8005250:	2300      	movs	r3, #0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <xQueueGenericSend+0xc6>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	61fb      	str	r3, [r7, #28]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800526e:	f001 ff53 	bl	8007118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <xQueueGenericSend+0xdc>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d129      	bne.n	80052d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800528a:	f000 fa0f 	bl	80056ac <prvCopyDataToQueue>
 800528e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	3324      	adds	r3, #36	@ 0x24
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f805 	bl	80062ac <xTaskRemoveFromEventList>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052a8:	4b3f      	ldr	r3, [pc, #252]	@ (80053a8 <xQueueGenericSend+0x200>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	e00a      	b.n	80052d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052c0:	4b39      	ldr	r3, [pc, #228]	@ (80053a8 <xQueueGenericSend+0x200>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052d0:	f001 ff54 	bl	800717c <vPortExitCritical>
				return pdPASS;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e063      	b.n	80053a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052de:	f001 ff4d 	bl	800717c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e05c      	b.n	80053a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f83f 	bl	8006374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f6:	2301      	movs	r3, #1
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052fa:	f001 ff3f 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052fe:	f000 fda7 	bl	8005e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005302:	f001 ff09 	bl	8007118 <vPortEnterCritical>
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800530c:	b25b      	sxtb	r3, r3
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005312:	d103      	bne.n	800531c <xQueueGenericSend+0x174>
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005322:	b25b      	sxtb	r3, r3
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005328:	d103      	bne.n	8005332 <xQueueGenericSend+0x18a>
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005332:	f001 ff23 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005336:	1d3a      	adds	r2, r7, #4
 8005338:	f107 0314 	add.w	r3, r7, #20
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f001 f82e 	bl	80063a0 <xTaskCheckForTimeOut>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d124      	bne.n	8005394 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800534a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800534c:	f000 faa6 	bl	800589c <prvIsQueueFull>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	3310      	adds	r3, #16
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f000 ff52 	bl	8006208 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005366:	f000 fa31 	bl	80057cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800536a:	f000 fd7f 	bl	8005e6c <xTaskResumeAll>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	f47f af7c 	bne.w	800526e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005376:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <xQueueGenericSend+0x200>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	e772      	b.n	800526e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800538a:	f000 fa1f 	bl	80057cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538e:	f000 fd6d 	bl	8005e6c <xTaskResumeAll>
 8005392:	e76c      	b.n	800526e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005396:	f000 fa19 	bl	80057cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800539a:	f000 fd67 	bl	8005e6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800539e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3738      	adds	r7, #56	@ 0x38
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b090      	sub	sp, #64	@ 0x40
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <xQueueGenericSendFromISR+0x3e>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <xQueueGenericSendFromISR+0x42>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueGenericSendFromISR+0x44>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d103      	bne.n	800541a <xQueueGenericSendFromISR+0x6e>
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <xQueueGenericSendFromISR+0x72>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueGenericSendFromISR+0x74>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	623b      	str	r3, [r7, #32]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800543c:	f001 ff4c 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005440:	f3ef 8211 	mrs	r2, BASEPRI
 8005444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	61fa      	str	r2, [r7, #28]
 8005456:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005458:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800545a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <xQueueGenericSendFromISR+0xc2>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d12f      	bne.n	80054ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800546e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005470:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005484:	f000 f912 	bl	80056ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005488:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005490:	d112      	bne.n	80054b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549c:	3324      	adds	r3, #36	@ 0x24
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 ff04 	bl	80062ac <xTaskRemoveFromEventList>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00e      	beq.n	80054c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e007      	b.n	80054c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054bc:	3301      	adds	r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	b25a      	sxtb	r2, r3
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80054cc:	e001      	b.n	80054d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3740      	adds	r7, #64	@ 0x40
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	@ 0x30
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <xQueueReceive+0x32>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	623b      	str	r3, [r7, #32]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <xQueueReceive+0x40>
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <xQueueReceive+0x44>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <xQueueReceive+0x46>
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10b      	bne.n	800554a <xQueueReceive+0x62>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	61fb      	str	r3, [r7, #28]
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	e7fd      	b.n	8005546 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800554a:	f001 f875 	bl	8006638 <xTaskGetSchedulerState>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <xQueueReceive+0x72>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <xQueueReceive+0x76>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <xQueueReceive+0x78>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <xQueueReceive+0x94>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800557c:	f001 fdcc 	bl	8007118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01f      	beq.n	80055cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005590:	f000 f8f6 	bl	8005780 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00f      	beq.n	80055c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	3310      	adds	r3, #16
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fe7f 	bl	80062ac <xTaskRemoveFromEventList>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055b4:	4b3c      	ldr	r3, [pc, #240]	@ (80056a8 <xQueueReceive+0x1c0>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055c4:	f001 fdda 	bl	800717c <vPortExitCritical>
				return pdPASS;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e069      	b.n	80056a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d2:	f001 fdd3 	bl	800717c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e062      	b.n	80056a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fec5 	bl	8006374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ee:	f001 fdc5 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f2:	f000 fc2d 	bl	8005e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f6:	f001 fd8f 	bl	8007118 <vPortEnterCritical>
 80055fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005600:	b25b      	sxtb	r3, r3
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005606:	d103      	bne.n	8005610 <xQueueReceive+0x128>
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005616:	b25b      	sxtb	r3, r3
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800561c:	d103      	bne.n	8005626 <xQueueReceive+0x13e>
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005626:	f001 fda9 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562a:	1d3a      	adds	r2, r7, #4
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 feb4 	bl	80063a0 <xTaskCheckForTimeOut>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d123      	bne.n	8005686 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800563e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005640:	f000 f916 	bl	8005870 <prvIsQueueEmpty>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564c:	3324      	adds	r3, #36	@ 0x24
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4611      	mov	r1, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fdd8 	bl	8006208 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565a:	f000 f8b7 	bl	80057cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800565e:	f000 fc05 	bl	8005e6c <xTaskResumeAll>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d189      	bne.n	800557c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005668:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <xQueueReceive+0x1c0>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	e780      	b.n	800557c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800567a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800567c:	f000 f8a6 	bl	80057cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005680:	f000 fbf4 	bl	8005e6c <xTaskResumeAll>
 8005684:	e77a      	b.n	800557c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005688:	f000 f8a0 	bl	80057cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800568c:	f000 fbee 	bl	8005e6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005692:	f000 f8ed 	bl	8005870 <prvIsQueueEmpty>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	f43f af6f 	beq.w	800557c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800569e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3730      	adds	r7, #48	@ 0x30
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d14d      	bne.n	800576e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 ffcc 	bl	8006674 <xTaskPriorityDisinherit>
 80056dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	e043      	b.n	800576e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d119      	bne.n	8005720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6858      	ldr	r0, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	461a      	mov	r2, r3
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	f002 f8aa 	bl	8007850 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	429a      	cmp	r2, r3
 8005714:	d32b      	bcc.n	800576e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	e026      	b.n	800576e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68d8      	ldr	r0, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	461a      	mov	r2, r3
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	f002 f890 	bl	8007850 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005738:	425b      	negs	r3, r3
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d207      	bcs.n	800575c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	425b      	negs	r3, r3
 8005756:	441a      	add	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d105      	bne.n	800576e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3b01      	subs	r3, #1
 800576c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005776:	697b      	ldr	r3, [r7, #20]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d018      	beq.n	80057c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	441a      	add	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d303      	bcc.n	80057b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68d9      	ldr	r1, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	461a      	mov	r2, r3
 80057be:	6838      	ldr	r0, [r7, #0]
 80057c0:	f002 f846 	bl	8007850 <memcpy>
	}
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057d4:	f001 fca0 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e0:	e011      	b.n	8005806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d012      	beq.n	8005810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3324      	adds	r3, #36	@ 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fd5c 	bl	80062ac <xTaskRemoveFromEventList>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057fa:	f000 fe35 	bl	8006468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	3b01      	subs	r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	dce9      	bgt.n	80057e2 <prvUnlockQueue+0x16>
 800580e:	e000      	b.n	8005812 <prvUnlockQueue+0x46>
					break;
 8005810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	22ff      	movs	r2, #255	@ 0xff
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800581a:	f001 fcaf 	bl	800717c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800581e:	f001 fc7b 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582a:	e011      	b.n	8005850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3310      	adds	r3, #16
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fd37 	bl	80062ac <xTaskRemoveFromEventList>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005844:	f000 fe10 	bl	8006468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	3b01      	subs	r3, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dce9      	bgt.n	800582c <prvUnlockQueue+0x60>
 8005858:	e000      	b.n	800585c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800585a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	22ff      	movs	r2, #255	@ 0xff
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005864:	f001 fc8a 	bl	800717c <vPortExitCritical>
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005878:	f001 fc4e 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e001      	b.n	800588e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800588e:	f001 fc75 	bl	800717c <vPortExitCritical>

	return xReturn;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a4:	f001 fc38 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d102      	bne.n	80058ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e001      	b.n	80058be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058be:	f001 fc5d 	bl	800717c <vPortExitCritical>

	return xReturn;
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e014      	b.n	8005906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058dc:	4a0f      	ldr	r2, [pc, #60]	@ (800591c <vQueueAddToRegistry+0x50>)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058e8:	490c      	ldr	r1, [pc, #48]	@ (800591c <vQueueAddToRegistry+0x50>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058f2:	4a0a      	ldr	r2, [pc, #40]	@ (800591c <vQueueAddToRegistry+0x50>)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058fe:	e006      	b.n	800590e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b07      	cmp	r3, #7
 800590a:	d9e7      	bls.n	80058dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000a04 	.word	0x20000a04

08005920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005930:	f001 fbf2 	bl	8007118 <vPortEnterCritical>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800593a:	b25b      	sxtb	r3, r3
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005940:	d103      	bne.n	800594a <vQueueWaitForMessageRestricted+0x2a>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005950:	b25b      	sxtb	r3, r3
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005956:	d103      	bne.n	8005960 <vQueueWaitForMessageRestricted+0x40>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005960:	f001 fc0c 	bl	800717c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3324      	adds	r3, #36	@ 0x24
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fc6d 	bl	8006254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800597a:	6978      	ldr	r0, [r7, #20]
 800597c:	f7ff ff26 	bl	80057cc <prvUnlockQueue>
	}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	@ 0x38
 800598c:	af04      	add	r7, sp, #16
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	623b      	str	r3, [r7, #32]
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	61fb      	str	r3, [r7, #28]
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	e7fd      	b.n	80059ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059d2:	23a8      	movs	r3, #168	@ 0xa8
 80059d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80059da:	d00b      	beq.n	80059f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	61bb      	str	r3, [r7, #24]
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01e      	beq.n	8005a3a <xTaskCreateStatic+0xb2>
 80059fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01b      	beq.n	8005a3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a14:	2300      	movs	r3, #0
 8005a16:	9303      	str	r3, [sp, #12]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	9302      	str	r3, [sp, #8]
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f851 	bl	8005ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a34:	f000 f8f6 	bl	8005c24 <prvAddNewTaskToReadyList>
 8005a38:	e001      	b.n	8005a3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a3e:	697b      	ldr	r3, [r7, #20]
	}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3728      	adds	r7, #40	@ 0x28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	@ 0x30
 8005a4c:	af04      	add	r7, sp, #16
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 fc7d 	bl	800735c <pvPortMalloc>
 8005a62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a6a:	20a8      	movs	r0, #168	@ 0xa8
 8005a6c:	f001 fc76 	bl	800735c <pvPortMalloc>
 8005a70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a7e:	e005      	b.n	8005a8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a80:	6978      	ldr	r0, [r7, #20]
 8005a82:	f001 fd39 	bl	80074f8 <vPortFree>
 8005a86:	e001      	b.n	8005a8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d017      	beq.n	8005ac2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9303      	str	r3, [sp, #12]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	9302      	str	r3, [sp, #8]
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f80f 	bl	8005ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab6:	69f8      	ldr	r0, [r7, #28]
 8005ab8:	f000 f8b4 	bl	8005c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005abc:	2301      	movs	r3, #1
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e002      	b.n	8005ac8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ac6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
	}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	461a      	mov	r2, r3
 8005aec:	21a5      	movs	r1, #165	@ 0xa5
 8005aee:	f001 fe23 	bl	8007738 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005afc:	3b01      	subs	r3, #1
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	617b      	str	r3, [r7, #20]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01f      	beq.n	8005b74 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	e012      	b.n	8005b60 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	7819      	ldrb	r1, [r3, #0]
 8005b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	3334      	adds	r3, #52	@ 0x34
 8005b4a:	460a      	mov	r2, r1
 8005b4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b0f      	cmp	r3, #15
 8005b64:	d9e9      	bls.n	8005b3a <prvInitialiseNewTask+0x66>
 8005b66:	e000      	b.n	8005b6a <prvInitialiseNewTask+0x96>
			{
				break;
 8005b68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b72:	e003      	b.n	8005b7c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	2b37      	cmp	r3, #55	@ 0x37
 8005b80:	d901      	bls.n	8005b86 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b82:	2337      	movs	r3, #55	@ 0x37
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	2200      	movs	r2, #0
 8005b96:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff f965 	bl	8004e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff f960 	bl	8004e6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	3354      	adds	r3, #84	@ 0x54
 8005bd6:	224c      	movs	r2, #76	@ 0x4c
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 fdac 	bl	8007738 <memset>
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	4a0d      	ldr	r2, [pc, #52]	@ (8005c18 <prvInitialiseNewTask+0x144>)
 8005be4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	4a0c      	ldr	r2, [pc, #48]	@ (8005c1c <prvInitialiseNewTask+0x148>)
 8005bea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	4a0c      	ldr	r2, [pc, #48]	@ (8005c20 <prvInitialiseNewTask+0x14c>)
 8005bf0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	69b8      	ldr	r0, [r7, #24]
 8005bf8:	f001 f95a 	bl	8006eb0 <pxPortInitialiseStack>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c0e:	bf00      	nop
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20004c98 	.word	0x20004c98
 8005c1c:	20004d00 	.word	0x20004d00
 8005c20:	20004d68 	.word	0x20004d68

08005c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c2c:	f001 fa74 	bl	8007118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c30:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c42:	4a2a      	ldr	r2, [pc, #168]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c48:	4b27      	ldr	r3, [pc, #156]	@ (8005ce8 <prvAddNewTaskToReadyList+0xc4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d110      	bne.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c50:	f000 fc2e 	bl	80064b0 <prvInitialiseTaskLists>
 8005c54:	e00d      	b.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c56:	4b26      	ldr	r3, [pc, #152]	@ (8005cf0 <prvAddNewTaskToReadyList+0xcc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c5e:	4b23      	ldr	r3, [pc, #140]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d802      	bhi.n	8005c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c72:	4b20      	ldr	r3, [pc, #128]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf4 <prvAddNewTaskToReadyList+0xd0>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c88:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d903      	bls.n	8005c98 <prvAddNewTaskToReadyList+0x74>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <prvAddNewTaskToReadyList+0xd4>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <prvAddNewTaskToReadyList+0xd8>)
 8005ca6:	441a      	add	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f7ff f8e9 	bl	8004e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cb4:	f001 fa62 	bl	800717c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <prvAddNewTaskToReadyList+0xcc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cec <prvAddNewTaskToReadyList+0xc8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d207      	bcs.n	8005cde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cce:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <prvAddNewTaskToReadyList+0xdc>)
 8005cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000f18 	.word	0x20000f18
 8005cec:	20000a44 	.word	0x20000a44
 8005cf0:	20000f24 	.word	0x20000f24
 8005cf4:	20000f34 	.word	0x20000f34
 8005cf8:	20000f20 	.word	0x20000f20
 8005cfc:	20000a48 	.word	0x20000a48
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d018      	beq.n	8005d48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d16:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <vTaskDelay+0x64>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <vTaskDelay+0x32>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60bb      	str	r3, [r7, #8]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d36:	f000 f88b 	bl	8005e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fd09 	bl	8006754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d42:	f000 f893 	bl	8005e6c <xTaskResumeAll>
 8005d46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <vTaskDelay+0x68>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000f40 	.word	0x20000f40
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	@ 0x28
 8005d74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d7e:	463a      	mov	r2, r7
 8005d80:	1d39      	adds	r1, r7, #4
 8005d82:	f107 0308 	add.w	r3, r7, #8
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff f81c 	bl	8004dc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	9202      	str	r2, [sp, #8]
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	2300      	movs	r3, #0
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	460a      	mov	r2, r1
 8005d9e:	4924      	ldr	r1, [pc, #144]	@ (8005e30 <vTaskStartScheduler+0xc0>)
 8005da0:	4824      	ldr	r0, [pc, #144]	@ (8005e34 <vTaskStartScheduler+0xc4>)
 8005da2:	f7ff fdf1 	bl	8005988 <xTaskCreateStatic>
 8005da6:	4603      	mov	r3, r0
 8005da8:	4a23      	ldr	r2, [pc, #140]	@ (8005e38 <vTaskStartScheduler+0xc8>)
 8005daa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dac:	4b22      	ldr	r3, [pc, #136]	@ (8005e38 <vTaskStartScheduler+0xc8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e001      	b.n	8005dbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d102      	bne.n	8005dca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dc4:	f000 fd1a 	bl	80067fc <xTimerCreateTimerTask>
 8005dc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d11b      	bne.n	8005e08 <vTaskStartScheduler+0x98>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	613b      	str	r3, [r7, #16]
}
 8005de2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005de4:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <vTaskStartScheduler+0xcc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3354      	adds	r3, #84	@ 0x54
 8005dea:	4a15      	ldr	r2, [pc, #84]	@ (8005e40 <vTaskStartScheduler+0xd0>)
 8005dec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dee:	4b15      	ldr	r3, [pc, #84]	@ (8005e44 <vTaskStartScheduler+0xd4>)
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005df6:	4b14      	ldr	r3, [pc, #80]	@ (8005e48 <vTaskStartScheduler+0xd8>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <vTaskStartScheduler+0xdc>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e02:	f001 f8e5 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e06:	e00f      	b.n	8005e28 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e0e:	d10b      	bne.n	8005e28 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <vTaskStartScheduler+0xb4>
}
 8005e28:	bf00      	nop
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	08007948 	.word	0x08007948
 8005e34:	08006481 	.word	0x08006481
 8005e38:	20000f3c 	.word	0x20000f3c
 8005e3c:	20000a44 	.word	0x20000a44
 8005e40:	20000010 	.word	0x20000010
 8005e44:	20000f38 	.word	0x20000f38
 8005e48:	20000f24 	.word	0x20000f24
 8005e4c:	20000f1c 	.word	0x20000f1c

08005e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e54:	4b04      	ldr	r3, [pc, #16]	@ (8005e68 <vTaskSuspendAll+0x18>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	4a03      	ldr	r2, [pc, #12]	@ (8005e68 <vTaskSuspendAll+0x18>)
 8005e5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e5e:	bf00      	nop
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	20000f40 	.word	0x20000f40

08005e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e7a:	4b42      	ldr	r3, [pc, #264]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <xTaskResumeAll+0x2e>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	603b      	str	r3, [r7, #0]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e9a:	f001 f93d 	bl	8007118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e9e:	4b39      	ldr	r3, [pc, #228]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	4a37      	ldr	r2, [pc, #220]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005ea6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea8:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <xTaskResumeAll+0x118>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d162      	bne.n	8005f76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eb0:	4b35      	ldr	r3, [pc, #212]	@ (8005f88 <xTaskResumeAll+0x11c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d05e      	beq.n	8005f76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb8:	e02f      	b.n	8005f1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eba:	4b34      	ldr	r3, [pc, #208]	@ (8005f8c <xTaskResumeAll+0x120>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f83a 	bl	8004f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff f835 	bl	8004f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eda:	4b2d      	ldr	r3, [pc, #180]	@ (8005f90 <xTaskResumeAll+0x124>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d903      	bls.n	8005eea <xTaskResumeAll+0x7e>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f90 <xTaskResumeAll+0x124>)
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4a27      	ldr	r2, [pc, #156]	@ (8005f94 <xTaskResumeAll+0x128>)
 8005ef8:	441a      	add	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f7fe ffc0 	bl	8004e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0a:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <xTaskResumeAll+0x12c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d302      	bcc.n	8005f1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f14:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <xTaskResumeAll+0x130>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f8c <xTaskResumeAll+0x120>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1cb      	bne.n	8005eba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f28:	f000 fb66 	bl	80065f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <xTaskResumeAll+0x134>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d010      	beq.n	8005f5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f38:	f000 f846 	bl	8005fc8 <xTaskIncrementTick>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f42:	4b16      	ldr	r3, [pc, #88]	@ (8005f9c <xTaskResumeAll+0x130>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f1      	bne.n	8005f38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f54:	4b12      	ldr	r3, [pc, #72]	@ (8005fa0 <xTaskResumeAll+0x134>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f5a:	4b10      	ldr	r3, [pc, #64]	@ (8005f9c <xTaskResumeAll+0x130>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f62:	2301      	movs	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <xTaskResumeAll+0x138>)
 8005f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 f901 	bl	800717c <vPortExitCritical>

	return xAlreadyYielded;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000f40 	.word	0x20000f40
 8005f88:	20000f18 	.word	0x20000f18
 8005f8c:	20000ed8 	.word	0x20000ed8
 8005f90:	20000f20 	.word	0x20000f20
 8005f94:	20000a48 	.word	0x20000a48
 8005f98:	20000a44 	.word	0x20000a44
 8005f9c:	20000f2c 	.word	0x20000f2c
 8005fa0:	20000f28 	.word	0x20000f28
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fae:	4b05      	ldr	r3, [pc, #20]	@ (8005fc4 <xTaskGetTickCount+0x1c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fb4:	687b      	ldr	r3, [r7, #4]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000f1c 	.word	0x20000f1c

08005fc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006110 <xTaskIncrementTick+0x148>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 8090 	bne.w	80060fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8006114 <xTaskIncrementTick+0x14c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fe4:	4a4b      	ldr	r2, [pc, #300]	@ (8006114 <xTaskIncrementTick+0x14c>)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d121      	bne.n	8006034 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ff0:	4b49      	ldr	r3, [pc, #292]	@ (8006118 <xTaskIncrementTick+0x150>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	603b      	str	r3, [r7, #0]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xTaskIncrementTick+0x46>
 8006012:	4b41      	ldr	r3, [pc, #260]	@ (8006118 <xTaskIncrementTick+0x150>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	4b40      	ldr	r3, [pc, #256]	@ (800611c <xTaskIncrementTick+0x154>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a3e      	ldr	r2, [pc, #248]	@ (8006118 <xTaskIncrementTick+0x150>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4a3e      	ldr	r2, [pc, #248]	@ (800611c <xTaskIncrementTick+0x154>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b3e      	ldr	r3, [pc, #248]	@ (8006120 <xTaskIncrementTick+0x158>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a3c      	ldr	r2, [pc, #240]	@ (8006120 <xTaskIncrementTick+0x158>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	f000 fae2 	bl	80065f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006034:	4b3b      	ldr	r3, [pc, #236]	@ (8006124 <xTaskIncrementTick+0x15c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	429a      	cmp	r2, r3
 800603c:	d349      	bcc.n	80060d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800603e:	4b36      	ldr	r3, [pc, #216]	@ (8006118 <xTaskIncrementTick+0x150>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006048:	4b36      	ldr	r3, [pc, #216]	@ (8006124 <xTaskIncrementTick+0x15c>)
 800604a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800604e:	601a      	str	r2, [r3, #0]
					break;
 8006050:	e03f      	b.n	80060d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006052:	4b31      	ldr	r3, [pc, #196]	@ (8006118 <xTaskIncrementTick+0x150>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d203      	bcs.n	8006072 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800606a:	4a2e      	ldr	r2, [pc, #184]	@ (8006124 <xTaskIncrementTick+0x15c>)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006070:	e02f      	b.n	80060d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3304      	adds	r3, #4
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe ff62 	bl	8004f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	d004      	beq.n	800608e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	3318      	adds	r3, #24
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe ff59 	bl	8004f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	4b25      	ldr	r3, [pc, #148]	@ (8006128 <xTaskIncrementTick+0x160>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d903      	bls.n	80060a2 <xTaskIncrementTick+0xda>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	4a22      	ldr	r2, [pc, #136]	@ (8006128 <xTaskIncrementTick+0x160>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <xTaskIncrementTick+0x164>)
 80060b0:	441a      	add	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe fee4 	bl	8004e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <xTaskIncrementTick+0x168>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3b8      	bcc.n	800603e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d0:	e7b5      	b.n	800603e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060d2:	4b17      	ldr	r3, [pc, #92]	@ (8006130 <xTaskIncrementTick+0x168>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d8:	4914      	ldr	r1, [pc, #80]	@ (800612c <xTaskIncrementTick+0x164>)
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d901      	bls.n	80060ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060ee:	4b11      	ldr	r3, [pc, #68]	@ (8006134 <xTaskIncrementTick+0x16c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060f6:	2301      	movs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e004      	b.n	8006106 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006138 <xTaskIncrementTick+0x170>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3301      	adds	r3, #1
 8006102:	4a0d      	ldr	r2, [pc, #52]	@ (8006138 <xTaskIncrementTick+0x170>)
 8006104:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006106:	697b      	ldr	r3, [r7, #20]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000f40 	.word	0x20000f40
 8006114:	20000f1c 	.word	0x20000f1c
 8006118:	20000ed0 	.word	0x20000ed0
 800611c:	20000ed4 	.word	0x20000ed4
 8006120:	20000f30 	.word	0x20000f30
 8006124:	20000f38 	.word	0x20000f38
 8006128:	20000f20 	.word	0x20000f20
 800612c:	20000a48 	.word	0x20000a48
 8006130:	20000a44 	.word	0x20000a44
 8006134:	20000f2c 	.word	0x20000f2c
 8006138:	20000f28 	.word	0x20000f28

0800613c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006142:	4b2b      	ldr	r3, [pc, #172]	@ (80061f0 <vTaskSwitchContext+0xb4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800614a:	4b2a      	ldr	r3, [pc, #168]	@ (80061f4 <vTaskSwitchContext+0xb8>)
 800614c:	2201      	movs	r2, #1
 800614e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006150:	e047      	b.n	80061e2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006152:	4b28      	ldr	r3, [pc, #160]	@ (80061f4 <vTaskSwitchContext+0xb8>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006158:	4b27      	ldr	r3, [pc, #156]	@ (80061f8 <vTaskSwitchContext+0xbc>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e011      	b.n	8006184 <vTaskSwitchContext+0x48>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <vTaskSwitchContext+0x42>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	607b      	str	r3, [r7, #4]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <vTaskSwitchContext+0x3e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3b01      	subs	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	491d      	ldr	r1, [pc, #116]	@ (80061fc <vTaskSwitchContext+0xc0>)
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0e3      	beq.n	8006160 <vTaskSwitchContext+0x24>
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <vTaskSwitchContext+0xc0>)
 80061a4:	4413      	add	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3308      	adds	r3, #8
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d104      	bne.n	80061c8 <vTaskSwitchContext+0x8c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006200 <vTaskSwitchContext+0xc4>)
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <vTaskSwitchContext+0xbc>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061d8:	4b09      	ldr	r3, [pc, #36]	@ (8006200 <vTaskSwitchContext+0xc4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3354      	adds	r3, #84	@ 0x54
 80061de:	4a09      	ldr	r2, [pc, #36]	@ (8006204 <vTaskSwitchContext+0xc8>)
 80061e0:	6013      	str	r3, [r2, #0]
}
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000f40 	.word	0x20000f40
 80061f4:	20000f2c 	.word	0x20000f2c
 80061f8:	20000f20 	.word	0x20000f20
 80061fc:	20000a48 	.word	0x20000a48
 8006200:	20000a44 	.word	0x20000a44
 8006204:	20000010 	.word	0x20000010

08006208 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	60fb      	str	r3, [r7, #12]
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	e7fd      	b.n	800622c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006230:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <vTaskPlaceOnEventList+0x48>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3318      	adds	r3, #24
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fe fe48 	bl	8004ece <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800623e:	2101      	movs	r1, #1
 8006240:	6838      	ldr	r0, [r7, #0]
 8006242:	f000 fa87 	bl	8006754 <prvAddCurrentTaskToDelayedList>
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000a44 	.word	0x20000a44

08006254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10b      	bne.n	800627e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	617b      	str	r3, [r7, #20]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3318      	adds	r3, #24
 8006284:	4619      	mov	r1, r3
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7fe fdfd 	bl	8004e86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006296:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	68b8      	ldr	r0, [r7, #8]
 800629c:	f000 fa5a 	bl	8006754 <prvAddCurrentTaskToDelayedList>
	}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000a44 	.word	0x20000a44

080062ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	60fb      	str	r3, [r7, #12]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fe2e 	bl	8004f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e4:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <xTaskRemoveFromEventList+0xb0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11d      	bne.n	8006328 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe fe25 	bl	8004f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	4b19      	ldr	r3, [pc, #100]	@ (8006360 <xTaskRemoveFromEventList+0xb4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d903      	bls.n	800630a <xTaskRemoveFromEventList+0x5e>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <xTaskRemoveFromEventList+0xb4>)
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4a13      	ldr	r2, [pc, #76]	@ (8006364 <xTaskRemoveFromEventList+0xb8>)
 8006318:	441a      	add	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7fe fdb0 	bl	8004e86 <vListInsertEnd>
 8006326:	e005      	b.n	8006334 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	3318      	adds	r3, #24
 800632c:	4619      	mov	r1, r3
 800632e:	480e      	ldr	r0, [pc, #56]	@ (8006368 <xTaskRemoveFromEventList+0xbc>)
 8006330:	f7fe fda9 	bl	8004e86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006338:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <xTaskRemoveFromEventList+0xc0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	429a      	cmp	r2, r3
 8006340:	d905      	bls.n	800634e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006346:	4b0a      	ldr	r3, [pc, #40]	@ (8006370 <xTaskRemoveFromEventList+0xc4>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e001      	b.n	8006352 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006352:	697b      	ldr	r3, [r7, #20]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000f40 	.word	0x20000f40
 8006360:	20000f20 	.word	0x20000f20
 8006364:	20000a48 	.word	0x20000a48
 8006368:	20000ed8 	.word	0x20000ed8
 800636c:	20000a44 	.word	0x20000a44
 8006370:	20000f2c 	.word	0x20000f2c

08006374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <vTaskInternalSetTimeOutState+0x24>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006384:	4b05      	ldr	r3, [pc, #20]	@ (800639c <vTaskInternalSetTimeOutState+0x28>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	605a      	str	r2, [r3, #4]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000f30 	.word	0x20000f30
 800639c:	20000f1c 	.word	0x20000f1c

080063a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	e7fd      	b.n	80063c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60fb      	str	r3, [r7, #12]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063e6:	f000 fe97 	bl	8007118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006460 <xTaskCheckForTimeOut+0xc0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006402:	d102      	bne.n	800640a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e023      	b.n	8006452 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <xTaskCheckForTimeOut+0xc4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d007      	beq.n	8006426 <xTaskCheckForTimeOut+0x86>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	429a      	cmp	r2, r3
 800641e:	d302      	bcc.n	8006426 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e015      	b.n	8006452 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d20b      	bcs.n	8006448 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff99 	bl	8006374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e004      	b.n	8006452 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f000 fe93 	bl	800717c <vPortExitCritical>

	return xReturn;
 8006456:	69fb      	ldr	r3, [r7, #28]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000f1c 	.word	0x20000f1c
 8006464:	20000f30 	.word	0x20000f30

08006468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800646c:	4b03      	ldr	r3, [pc, #12]	@ (800647c <vTaskMissedYield+0x14>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000f2c 	.word	0x20000f2c

08006480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006488:	f000 f852 	bl	8006530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800648c:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <prvIdleTask+0x28>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d9f9      	bls.n	8006488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006494:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <prvIdleTask+0x2c>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064a4:	e7f0      	b.n	8006488 <prvIdleTask+0x8>
 80064a6:	bf00      	nop
 80064a8:	20000a48 	.word	0x20000a48
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	e00c      	b.n	80064d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4a12      	ldr	r2, [pc, #72]	@ (8006510 <prvInitialiseTaskLists+0x60>)
 80064c8:	4413      	add	r3, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fcae 	bl	8004e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b37      	cmp	r3, #55	@ 0x37
 80064da:	d9ef      	bls.n	80064bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064dc:	480d      	ldr	r0, [pc, #52]	@ (8006514 <prvInitialiseTaskLists+0x64>)
 80064de:	f7fe fca5 	bl	8004e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064e2:	480d      	ldr	r0, [pc, #52]	@ (8006518 <prvInitialiseTaskLists+0x68>)
 80064e4:	f7fe fca2 	bl	8004e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064e8:	480c      	ldr	r0, [pc, #48]	@ (800651c <prvInitialiseTaskLists+0x6c>)
 80064ea:	f7fe fc9f 	bl	8004e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ee:	480c      	ldr	r0, [pc, #48]	@ (8006520 <prvInitialiseTaskLists+0x70>)
 80064f0:	f7fe fc9c 	bl	8004e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064f4:	480b      	ldr	r0, [pc, #44]	@ (8006524 <prvInitialiseTaskLists+0x74>)
 80064f6:	f7fe fc99 	bl	8004e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006528 <prvInitialiseTaskLists+0x78>)
 80064fc:	4a05      	ldr	r2, [pc, #20]	@ (8006514 <prvInitialiseTaskLists+0x64>)
 80064fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006500:	4b0a      	ldr	r3, [pc, #40]	@ (800652c <prvInitialiseTaskLists+0x7c>)
 8006502:	4a05      	ldr	r2, [pc, #20]	@ (8006518 <prvInitialiseTaskLists+0x68>)
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000a48 	.word	0x20000a48
 8006514:	20000ea8 	.word	0x20000ea8
 8006518:	20000ebc 	.word	0x20000ebc
 800651c:	20000ed8 	.word	0x20000ed8
 8006520:	20000eec 	.word	0x20000eec
 8006524:	20000f04 	.word	0x20000f04
 8006528:	20000ed0 	.word	0x20000ed0
 800652c:	20000ed4 	.word	0x20000ed4

08006530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006536:	e019      	b.n	800656c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006538:	f000 fdee 	bl	8007118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <prvCheckTasksWaitingTermination+0x50>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fcf9 	bl	8004f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800654e:	4b0d      	ldr	r3, [pc, #52]	@ (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3b01      	subs	r3, #1
 8006554:	4a0b      	ldr	r2, [pc, #44]	@ (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006558:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <prvCheckTasksWaitingTermination+0x58>)
 8006560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006562:	f000 fe0b 	bl	800717c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f810 	bl	800658c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800656c:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e1      	bne.n	8006538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000eec 	.word	0x20000eec
 8006584:	20000f18 	.word	0x20000f18
 8006588:	20000f00 	.word	0x20000f00

0800658c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3354      	adds	r3, #84	@ 0x54
 8006598:	4618      	mov	r0, r3
 800659a:	f001 f8d5 	bl	8007748 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d108      	bne.n	80065ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 ffa3 	bl	80074f8 <vPortFree>
				vPortFree( pxTCB );
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 ffa0 	bl	80074f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065b8:	e019      	b.n	80065ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d103      	bne.n	80065cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 ff97 	bl	80074f8 <vPortFree>
	}
 80065ca:	e010      	b.n	80065ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d00b      	beq.n	80065ee <prvDeleteTCB+0x62>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <prvDeleteTCB+0x5e>
	}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <prvResetNextTaskUnblockTime+0x38>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006608:	4b0a      	ldr	r3, [pc, #40]	@ (8006634 <prvResetNextTaskUnblockTime+0x3c>)
 800660a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800660e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006610:	e008      	b.n	8006624 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006612:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <prvResetNextTaskUnblockTime+0x38>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a04      	ldr	r2, [pc, #16]	@ (8006634 <prvResetNextTaskUnblockTime+0x3c>)
 8006622:	6013      	str	r3, [r2, #0]
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	20000ed0 	.word	0x20000ed0
 8006634:	20000f38 	.word	0x20000f38

08006638 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800663e:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <xTaskGetSchedulerState+0x34>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006646:	2301      	movs	r3, #1
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	e008      	b.n	800665e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664c:	4b08      	ldr	r3, [pc, #32]	@ (8006670 <xTaskGetSchedulerState+0x38>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006654:	2302      	movs	r3, #2
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	e001      	b.n	800665e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800665a:	2300      	movs	r3, #0
 800665c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800665e:	687b      	ldr	r3, [r7, #4]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	20000f24 	.word	0x20000f24
 8006670:	20000f40 	.word	0x20000f40

08006674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d058      	beq.n	800673c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800668a:	4b2f      	ldr	r3, [pc, #188]	@ (8006748 <xTaskPriorityDisinherit+0xd4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	d00b      	beq.n	80066ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60fb      	str	r3, [r7, #12]
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	e7fd      	b.n	80066a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10b      	bne.n	80066cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	60bb      	str	r3, [r7, #8]
}
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	e7fd      	b.n	80066c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d0:	1e5a      	subs	r2, r3, #1
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	429a      	cmp	r2, r3
 80066e0:	d02c      	beq.n	800673c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d128      	bne.n	800673c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3304      	adds	r3, #4
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fe fc26 	bl	8004f40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670c:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <xTaskPriorityDisinherit+0xd8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d903      	bls.n	800671c <xTaskPriorityDisinherit+0xa8>
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006718:	4a0c      	ldr	r2, [pc, #48]	@ (800674c <xTaskPriorityDisinherit+0xd8>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4a09      	ldr	r2, [pc, #36]	@ (8006750 <xTaskPriorityDisinherit+0xdc>)
 800672a:	441a      	add	r2, r3
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fe fba7 	bl	8004e86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800673c:	697b      	ldr	r3, [r7, #20]
	}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000a44 	.word	0x20000a44
 800674c:	20000f20 	.word	0x20000f20
 8006750:	20000a48 	.word	0x20000a48

08006754 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800675e:	4b21      	ldr	r3, [pc, #132]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006764:	4b20      	ldr	r3, [pc, #128]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3304      	adds	r3, #4
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fbe8 	bl	8004f40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006776:	d10a      	bne.n	800678e <prvAddCurrentTaskToDelayedList+0x3a>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4819      	ldr	r0, [pc, #100]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006788:	f7fe fb7d 	bl	8004e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800678c:	e026      	b.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006796:	4b14      	ldr	r3, [pc, #80]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d209      	bcs.n	80067ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a6:	4b12      	ldr	r3, [pc, #72]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b0f      	ldr	r3, [pc, #60]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f7fe fb8b 	bl	8004ece <vListInsert>
}
 80067b8:	e010      	b.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ba:	4b0e      	ldr	r3, [pc, #56]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fb81 	bl	8004ece <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067cc:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d202      	bcs.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067d6:	4a08      	ldr	r2, [pc, #32]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6013      	str	r3, [r2, #0]
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000f1c 	.word	0x20000f1c
 80067e8:	20000a44 	.word	0x20000a44
 80067ec:	20000f04 	.word	0x20000f04
 80067f0:	20000ed4 	.word	0x20000ed4
 80067f4:	20000ed0 	.word	0x20000ed0
 80067f8:	20000f38 	.word	0x20000f38

080067fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	@ 0x28
 8006800:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006806:	f000 fb13 	bl	8006e30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800680a:	4b1d      	ldr	r3, [pc, #116]	@ (8006880 <xTimerCreateTimerTask+0x84>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d021      	beq.n	8006856 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800681a:	1d3a      	adds	r2, r7, #4
 800681c:	f107 0108 	add.w	r1, r7, #8
 8006820:	f107 030c 	add.w	r3, r7, #12
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fae7 	bl	8004df8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	9202      	str	r2, [sp, #8]
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	2302      	movs	r3, #2
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	460a      	mov	r2, r1
 800683c:	4911      	ldr	r1, [pc, #68]	@ (8006884 <xTimerCreateTimerTask+0x88>)
 800683e:	4812      	ldr	r0, [pc, #72]	@ (8006888 <xTimerCreateTimerTask+0x8c>)
 8006840:	f7ff f8a2 	bl	8005988 <xTaskCreateStatic>
 8006844:	4603      	mov	r3, r0
 8006846:	4a11      	ldr	r2, [pc, #68]	@ (800688c <xTimerCreateTimerTask+0x90>)
 8006848:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800684a:	4b10      	ldr	r3, [pc, #64]	@ (800688c <xTimerCreateTimerTask+0x90>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006852:	2301      	movs	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006874:	697b      	ldr	r3, [r7, #20]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000f74 	.word	0x20000f74
 8006884:	08007950 	.word	0x08007950
 8006888:	080069c9 	.word	0x080069c9
 800688c:	20000f78 	.word	0x20000f78

08006890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	@ 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800689e:	2300      	movs	r3, #0
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	623b      	str	r3, [r7, #32]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068c0:	4b19      	ldr	r3, [pc, #100]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d02a      	beq.n	800691e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	dc18      	bgt.n	800690c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068da:	f7ff fead 	bl	8006638 <xTaskGetSchedulerState>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d109      	bne.n	80068f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068e4:	4b10      	ldr	r3, [pc, #64]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	f107 0110 	add.w	r1, r7, #16
 80068ec:	2300      	movs	r3, #0
 80068ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f0:	f7fe fc5a 	bl	80051a8 <xQueueGenericSend>
 80068f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80068f6:	e012      	b.n	800691e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	f107 0110 	add.w	r1, r7, #16
 8006900:	2300      	movs	r3, #0
 8006902:	2200      	movs	r2, #0
 8006904:	f7fe fc50 	bl	80051a8 <xQueueGenericSend>
 8006908:	6278      	str	r0, [r7, #36]	@ 0x24
 800690a:	e008      	b.n	800691e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800690c:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <xTimerGenericCommand+0x98>)
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	f107 0110 	add.w	r1, r7, #16
 8006914:	2300      	movs	r3, #0
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	f7fe fd48 	bl	80053ac <xQueueGenericSendFromISR>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006920:	4618      	mov	r0, r3
 8006922:	3728      	adds	r7, #40	@ 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000f74 	.word	0x20000f74

0800692c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006936:	4b23      	ldr	r3, [pc, #140]	@ (80069c4 <prvProcessExpiredTimer+0x98>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fafb 	bl	8004f40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d023      	beq.n	80069a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	18d1      	adds	r1, r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	6978      	ldr	r0, [r7, #20]
 8006966:	f000 f8d5 	bl	8006b14 <prvInsertTimerInActiveList>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006970:	2300      	movs	r3, #0
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	2100      	movs	r1, #0
 800697a:	6978      	ldr	r0, [r7, #20]
 800697c:	f7ff ff88 	bl	8006890 <xTimerGenericCommand>
 8006980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d114      	bne.n	80069b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	6978      	ldr	r0, [r7, #20]
 80069b8:	4798      	blx	r3
}
 80069ba:	bf00      	nop
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000f6c 	.word	0x20000f6c

080069c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f859 	bl	8006a8c <prvGetNextExpireTime>
 80069da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f805 	bl	80069f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069e6:	f000 f8d7 	bl	8006b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ea:	bf00      	nop
 80069ec:	e7f0      	b.n	80069d0 <prvTimerTask+0x8>
	...

080069f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069fa:	f7ff fa29 	bl	8005e50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069fe:	f107 0308 	add.w	r3, r7, #8
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f866 	bl	8006ad4 <prvSampleTimeNow>
 8006a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d130      	bne.n	8006a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <prvProcessTimerOrBlockTask+0x3c>
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d806      	bhi.n	8006a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a1e:	f7ff fa25 	bl	8005e6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff81 	bl	800692c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a2a:	e024      	b.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a32:	4b13      	ldr	r3, [pc, #76]	@ (8006a80 <prvProcessTimerOrBlockTask+0x90>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <prvProcessTimerOrBlockTask+0x50>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <prvProcessTimerOrBlockTask+0x52>
 8006a40:	2300      	movs	r3, #0
 8006a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a44:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <prvProcessTimerOrBlockTask+0x94>)
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fe ff65 	bl	8005920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a56:	f7ff fa09 	bl	8005e6c <xTaskResumeAll>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a60:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <prvProcessTimerOrBlockTask+0x98>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
}
 8006a70:	e001      	b.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a72:	f7ff f9fb 	bl	8005e6c <xTaskResumeAll>
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000f70 	.word	0x20000f70
 8006a84:	20000f74 	.word	0x20000f74
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a94:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad0 <prvGetNextExpireTime+0x44>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <prvGetNextExpireTime+0x16>
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	e000      	b.n	8006aa4 <prvGetNextExpireTime+0x18>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <prvGetNextExpireTime+0x44>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e001      	b.n	8006ac0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20000f6c 	.word	0x20000f6c

08006ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006adc:	f7ff fa64 	bl	8005fa8 <xTaskGetTickCount>
 8006ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <prvSampleTimeNow+0x3c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d205      	bcs.n	8006af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006aec:	f000 f93a 	bl	8006d64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e002      	b.n	8006afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006afe:	4a04      	ldr	r2, [pc, #16]	@ (8006b10 <prvSampleTimeNow+0x3c>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000f7c 	.word	0x20000f7c

08006b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d812      	bhi.n	8006b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e01b      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <prvInsertTimerInActiveList+0x7c>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7fe f9b8 	bl	8004ece <vListInsert>
 8006b5e:	e012      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d206      	bcs.n	8006b76 <prvInsertTimerInActiveList+0x62>
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d302      	bcc.n	8006b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e007      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b76:	4b07      	ldr	r3, [pc, #28]	@ (8006b94 <prvInsertTimerInActiveList+0x80>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f7fe f9a4 	bl	8004ece <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b86:	697b      	ldr	r3, [r7, #20]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000f70 	.word	0x20000f70
 8006b94:	20000f6c 	.word	0x20000f6c

08006b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08e      	sub	sp, #56	@ 0x38
 8006b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b9e:	e0ce      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da19      	bge.n	8006bda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	3304      	adds	r3, #4
 8006baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	61fb      	str	r3, [r7, #28]
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	e7fd      	b.n	8006bc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd0:	6850      	ldr	r0, [r2, #4]
 8006bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd4:	6892      	ldr	r2, [r2, #8]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f2c0 80ae 	blt.w	8006d3e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe f9a4 	bl	8004f40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff ff6a 	bl	8006ad4 <prvSampleTimeNow>
 8006c00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	f200 8097 	bhi.w	8006d38 <prvProcessReceivedCommands+0x1a0>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <prvProcessReceivedCommands+0x78>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006caf 	.word	0x08006caf
 8006c20:	08006cc3 	.word	0x08006cc3
 8006c24:	08006d0f 	.word	0x08006d0f
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c39 	.word	0x08006c39
 8006c30:	08006caf 	.word	0x08006caf
 8006c34:	08006cc3 	.word	0x08006cc3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	18d1      	adds	r1, r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c58:	f7ff ff5c 	bl	8006b14 <prvInsertTimerInActiveList>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d06c      	beq.n	8006d3c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d061      	beq.n	8006d3c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	441a      	add	r2, r3
 8006c80:	2300      	movs	r3, #0
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c8a:	f7ff fe01 	bl	8006890 <xTimerGenericCommand>
 8006c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d152      	bne.n	8006d3c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	61bb      	str	r3, [r7, #24]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cc0:	e03d      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	617b      	str	r3, [r7, #20]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	18d1      	adds	r1, r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d08:	f7ff ff04 	bl	8006b14 <prvInsertTimerInActiveList>
					break;
 8006d0c:	e017      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1e:	f000 fbeb 	bl	80074f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d22:	e00c      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d36:	e002      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
					break;
 8006d3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d3e:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <prvProcessReceivedCommands+0x1c8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	1d39      	adds	r1, r7, #4
 8006d44:	2200      	movs	r2, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fbce 	bl	80054e8 <xQueueReceive>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f47f af26 	bne.w	8006ba0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3730      	adds	r7, #48	@ 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000f74 	.word	0x20000f74

08006d64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d6a:	e049      	b.n	8006e00 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d76:	4b2c      	ldr	r3, [pc, #176]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe f8db 	bl	8004f40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02f      	beq.n	8006e00 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4413      	add	r3, r2
 8006da8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d90e      	bls.n	8006dd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7fe f880 	bl	8004ece <vListInsert>
 8006dce:	e017      	b.n	8006e00 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff fd58 	bl	8006890 <xTimerGenericCommand>
 8006de0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10b      	bne.n	8006e00 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	603b      	str	r3, [r7, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e00:	4b09      	ldr	r3, [pc, #36]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1b0      	bne.n	8006d6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e0a:	4b07      	ldr	r3, [pc, #28]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <prvSwitchTimerLists+0xc8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e18:	4a04      	ldr	r2, [pc, #16]	@ (8006e2c <prvSwitchTimerLists+0xc8>)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	6013      	str	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000f6c 	.word	0x20000f6c
 8006e2c:	20000f70 	.word	0x20000f70

08006e30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e36:	f000 f96f 	bl	8007118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e3a:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d120      	bne.n	8006e84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e42:	4814      	ldr	r0, [pc, #80]	@ (8006e94 <prvCheckForValidListAndQueue+0x64>)
 8006e44:	f7fd fff2 	bl	8004e2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e48:	4813      	ldr	r0, [pc, #76]	@ (8006e98 <prvCheckForValidListAndQueue+0x68>)
 8006e4a:	f7fd ffef 	bl	8004e2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e4e:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <prvCheckForValidListAndQueue+0x6c>)
 8006e50:	4a10      	ldr	r2, [pc, #64]	@ (8006e94 <prvCheckForValidListAndQueue+0x64>)
 8006e52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e54:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <prvCheckForValidListAndQueue+0x70>)
 8006e56:	4a10      	ldr	r2, [pc, #64]	@ (8006e98 <prvCheckForValidListAndQueue+0x68>)
 8006e58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <prvCheckForValidListAndQueue+0x74>)
 8006e60:	4a11      	ldr	r2, [pc, #68]	@ (8006ea8 <prvCheckForValidListAndQueue+0x78>)
 8006e62:	2110      	movs	r1, #16
 8006e64:	200a      	movs	r0, #10
 8006e66:	f7fe f8ff 	bl	8005068 <xQueueGenericCreateStatic>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e70:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	490b      	ldr	r1, [pc, #44]	@ (8006eac <prvCheckForValidListAndQueue+0x7c>)
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fd24 	bl	80058cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e84:	f000 f97a 	bl	800717c <vPortExitCritical>
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000f74 	.word	0x20000f74
 8006e94:	20000f44 	.word	0x20000f44
 8006e98:	20000f58 	.word	0x20000f58
 8006e9c:	20000f6c 	.word	0x20000f6c
 8006ea0:	20000f70 	.word	0x20000f70
 8006ea4:	20001020 	.word	0x20001020
 8006ea8:	20000f80 	.word	0x20000f80
 8006eac:	08007958 	.word	0x08007958

08006eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b04      	subs	r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 0201 	bic.w	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <pxPortInitialiseStack+0x64>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b14      	subs	r3, #20
 8006eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b04      	subs	r3, #4
 8006ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f06f 0202 	mvn.w	r2, #2
 8006efe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3b20      	subs	r3, #32
 8006f04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f06:	68fb      	ldr	r3, [r7, #12]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	08006f19 	.word	0x08006f19

08006f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f22:	4b13      	ldr	r3, [pc, #76]	@ (8006f70 <prvTaskExitError+0x58>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f2a:	d00b      	beq.n	8006f44 <prvTaskExitError+0x2c>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60fb      	str	r3, [r7, #12]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <prvTaskExitError+0x28>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60bb      	str	r3, [r7, #8]
}
 8006f56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f58:	bf00      	nop
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0fc      	beq.n	8006f5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	2000000c 	.word	0x2000000c
	...

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	@ (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b47      	ldr	r3, [pc, #284]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a47      	ldr	r2, [pc, #284]	@ (80070f8 <xPortStartScheduler+0x128>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10b      	bne.n	8006ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80070fc <xPortStartScheduler+0x12c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d10b      	bne.n	800701a <xPortStartScheduler+0x4a>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	613b      	str	r3, [r7, #16]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800701a:	4b39      	ldr	r3, [pc, #228]	@ (8007100 <xPortStartScheduler+0x130>)
 800701c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	22ff      	movs	r2, #255	@ 0xff
 800702a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800703c:	b2da      	uxtb	r2, r3
 800703e:	4b31      	ldr	r3, [pc, #196]	@ (8007104 <xPortStartScheduler+0x134>)
 8007040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007042:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <xPortStartScheduler+0x138>)
 8007044:	2207      	movs	r2, #7
 8007046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007048:	e009      	b.n	800705e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800704a:	4b2f      	ldr	r3, [pc, #188]	@ (8007108 <xPortStartScheduler+0x138>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3b01      	subs	r3, #1
 8007050:	4a2d      	ldr	r2, [pc, #180]	@ (8007108 <xPortStartScheduler+0x138>)
 8007052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b80      	cmp	r3, #128	@ 0x80
 8007068:	d0ef      	beq.n	800704a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800706a:	4b27      	ldr	r3, [pc, #156]	@ (8007108 <xPortStartScheduler+0x138>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f1c3 0307 	rsb	r3, r3, #7
 8007072:	2b04      	cmp	r3, #4
 8007074:	d00b      	beq.n	800708e <xPortStartScheduler+0xbe>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800708e:	4b1e      	ldr	r3, [pc, #120]	@ (8007108 <xPortStartScheduler+0x138>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	4a1c      	ldr	r2, [pc, #112]	@ (8007108 <xPortStartScheduler+0x138>)
 8007096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007098:	4b1b      	ldr	r3, [pc, #108]	@ (8007108 <xPortStartScheduler+0x138>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070a0:	4a19      	ldr	r2, [pc, #100]	@ (8007108 <xPortStartScheduler+0x138>)
 80070a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070ac:	4b17      	ldr	r3, [pc, #92]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a16      	ldr	r2, [pc, #88]	@ (800710c <xPortStartScheduler+0x13c>)
 80070b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b8:	4b14      	ldr	r3, [pc, #80]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a13      	ldr	r2, [pc, #76]	@ (800710c <xPortStartScheduler+0x13c>)
 80070be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070c4:	f000 f8da 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c8:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <xPortStartScheduler+0x140>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070ce:	f000 f8f9 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070d2:	4b10      	ldr	r3, [pc, #64]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070de:	f7ff ff63 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070e2:	f7ff f82b 	bl	800613c <vTaskSwitchContext>
	prvTaskExitError();
 80070e6:	f7ff ff17 	bl	8006f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	e000ed00 	.word	0xe000ed00
 80070f8:	410fc271 	.word	0x410fc271
 80070fc:	410fc270 	.word	0x410fc270
 8007100:	e000e400 	.word	0xe000e400
 8007104:	20001070 	.word	0x20001070
 8007108:	20001074 	.word	0x20001074
 800710c:	e000ed20 	.word	0xe000ed20
 8007110:	2000000c 	.word	0x2000000c
 8007114:	e000ef34 	.word	0xe000ef34

08007118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <vPortEnterCritical+0x5c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0e      	ldr	r2, [pc, #56]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800713c:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d110      	bne.n	8007166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007144:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <vPortEnterCritical+0x60>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <vPortEnterCritical+0x4e>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	603b      	str	r3, [r7, #0]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <vPortEnterCritical+0x4a>
	}
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	2000000c 	.word	0x2000000c
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <vPortExitCritical+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10b      	bne.n	80071a2 <vPortExitCritical+0x26>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071a2:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <vPortExitCritical+0x50>)
 80071aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <vPortExitCritical+0x50>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <vPortExitCritical+0x44>
 80071b4:	2300      	movs	r3, #0
 80071b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f383 8811 	msr	BASEPRI, r3
}
 80071be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7fe ff9c 	bl	800613c <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7fe feb9 	bl	8005fc8 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <xPortSysTickHandler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	@ (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	@ (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	@ (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	20000000 	.word	0x20000000
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d915      	bls.n	8007316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a18      	ldr	r2, [pc, #96]	@ (800734c <vPortValidateInterruptPriority+0x74>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b16      	ldr	r3, [pc, #88]	@ (8007350 <vPortValidateInterruptPriority+0x78>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20b      	bcs.n	8007316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <vPortValidateInterruptPriority+0x7c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800731e:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <vPortValidateInterruptPriority+0x80>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90b      	bls.n	800733e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	603b      	str	r3, [r7, #0]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <vPortValidateInterruptPriority+0x62>
	}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	e000e3f0 	.word	0xe000e3f0
 8007350:	20001070 	.word	0x20001070
 8007354:	e000ed0c 	.word	0xe000ed0c
 8007358:	20001074 	.word	0x20001074

0800735c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	@ 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007368:	f7fe fd72 	bl	8005e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800736c:	4b5c      	ldr	r3, [pc, #368]	@ (80074e0 <pvPortMalloc+0x184>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007374:	f000 f924 	bl	80075c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007378:	4b5a      	ldr	r3, [pc, #360]	@ (80074e4 <pvPortMalloc+0x188>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 8095 	bne.w	80074b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01e      	beq.n	80073ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800738c:	2208      	movs	r2, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d015      	beq.n	80073ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <pvPortMalloc+0x6e>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d06f      	beq.n	80074b0 <pvPortMalloc+0x154>
 80073d0:	4b45      	ldr	r3, [pc, #276]	@ (80074e8 <pvPortMalloc+0x18c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d86a      	bhi.n	80074b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073da:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <pvPortMalloc+0x190>)
 80073dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073de:	4b43      	ldr	r3, [pc, #268]	@ (80074ec <pvPortMalloc+0x190>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073e4:	e004      	b.n	80073f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d903      	bls.n	8007402 <pvPortMalloc+0xa6>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1f1      	bne.n	80073e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007402:	4b37      	ldr	r3, [pc, #220]	@ (80074e0 <pvPortMalloc+0x184>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	429a      	cmp	r2, r3
 800740a:	d051      	beq.n	80074b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	4413      	add	r3, r2
 8007414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	1ad2      	subs	r2, r2, r3
 8007426:	2308      	movs	r3, #8
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	429a      	cmp	r2, r3
 800742c:	d920      	bls.n	8007470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800742e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <pvPortMalloc+0xfc>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800746a:	69b8      	ldr	r0, [r7, #24]
 800746c:	f000 f90a 	bl	8007684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	4a1b      	ldr	r2, [pc, #108]	@ (80074e8 <pvPortMalloc+0x18c>)
 800747c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800747e:	4b1a      	ldr	r3, [pc, #104]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b1b      	ldr	r3, [pc, #108]	@ (80074f0 <pvPortMalloc+0x194>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d203      	bcs.n	8007492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800748a:	4b17      	ldr	r3, [pc, #92]	@ (80074e8 <pvPortMalloc+0x18c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a18      	ldr	r2, [pc, #96]	@ (80074f0 <pvPortMalloc+0x194>)
 8007490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <pvPortMalloc+0x188>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	431a      	orrs	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <pvPortMalloc+0x198>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	4a11      	ldr	r2, [pc, #68]	@ (80074f4 <pvPortMalloc+0x198>)
 80074ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074b0:	f7fe fcdc 	bl	8005e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <pvPortMalloc+0x17a>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <pvPortMalloc+0x176>
	return pvReturn;
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3728      	adds	r7, #40	@ 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20004c80 	.word	0x20004c80
 80074e4:	20004c94 	.word	0x20004c94
 80074e8:	20004c84 	.word	0x20004c84
 80074ec:	20004c78 	.word	0x20004c78
 80074f0:	20004c88 	.word	0x20004c88
 80074f4:	20004c8c 	.word	0x20004c8c

080074f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04f      	beq.n	80075aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800750a:	2308      	movs	r3, #8
 800750c:	425b      	negs	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b25      	ldr	r3, [pc, #148]	@ (80075b4 <vPortFree+0xbc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <vPortFree+0x46>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <vPortFree+0x66>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	4b14      	ldr	r3, [pc, #80]	@ (80075b4 <vPortFree+0xbc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4013      	ands	r3, r2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11a      	bne.n	80075aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <vPortFree+0xbc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	43db      	mvns	r3, r3
 800757e:	401a      	ands	r2, r3
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007584:	f7fe fc64 	bl	8005e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <vPortFree+0xc0>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4413      	add	r3, r2
 8007592:	4a09      	ldr	r2, [pc, #36]	@ (80075b8 <vPortFree+0xc0>)
 8007594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007596:	6938      	ldr	r0, [r7, #16]
 8007598:	f000 f874 	bl	8007684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800759c:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <vPortFree+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	4a06      	ldr	r2, [pc, #24]	@ (80075bc <vPortFree+0xc4>)
 80075a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075a6:	f7fe fc61 	bl	8005e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20004c94 	.word	0x20004c94
 80075b8:	20004c84 	.word	0x20004c84
 80075bc:	20004c90 	.word	0x20004c90

080075c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80075ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075cc:	4b27      	ldr	r3, [pc, #156]	@ (800766c <prvHeapInit+0xac>)
 80075ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3307      	adds	r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <prvHeapInit+0xac>)
 80075f0:	4413      	add	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007670 <prvHeapInit+0xb0>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007670 <prvHeapInit+0xb0>)
 8007600:	2200      	movs	r2, #0
 8007602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	4413      	add	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800760c:	2208      	movs	r2, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a15      	ldr	r2, [pc, #84]	@ (8007674 <prvHeapInit+0xb4>)
 8007620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <prvHeapInit+0xb4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800762a:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <prvHeapInit+0xb4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <prvHeapInit+0xb4>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a0a      	ldr	r2, [pc, #40]	@ (8007678 <prvHeapInit+0xb8>)
 800764e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4a09      	ldr	r2, [pc, #36]	@ (800767c <prvHeapInit+0xbc>)
 8007656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <prvHeapInit+0xc0>)
 800765a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	20001078 	.word	0x20001078
 8007670:	20004c78 	.word	0x20004c78
 8007674:	20004c80 	.word	0x20004c80
 8007678:	20004c88 	.word	0x20004c88
 800767c:	20004c84 	.word	0x20004c84
 8007680:	20004c94 	.word	0x20004c94

08007684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800768c:	4b28      	ldr	r3, [pc, #160]	@ (8007730 <prvInsertBlockIntoFreeList+0xac>)
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e002      	b.n	8007698 <prvInsertBlockIntoFreeList+0x14>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d8f7      	bhi.n	8007692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	441a      	add	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	441a      	add	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d118      	bne.n	800770c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d00d      	beq.n	8007702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	441a      	add	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e008      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007702:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e003      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	d002      	beq.n	8007722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20004c78 	.word	0x20004c78
 8007734:	20004c80 	.word	0x20004c80

08007738 <memset>:
 8007738:	4402      	add	r2, r0
 800773a:	4603      	mov	r3, r0
 800773c:	4293      	cmp	r3, r2
 800773e:	d100      	bne.n	8007742 <memset+0xa>
 8007740:	4770      	bx	lr
 8007742:	f803 1b01 	strb.w	r1, [r3], #1
 8007746:	e7f9      	b.n	800773c <memset+0x4>

08007748 <_reclaim_reent>:
 8007748:	4b2d      	ldr	r3, [pc, #180]	@ (8007800 <_reclaim_reent+0xb8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4283      	cmp	r3, r0
 800774e:	b570      	push	{r4, r5, r6, lr}
 8007750:	4604      	mov	r4, r0
 8007752:	d053      	beq.n	80077fc <_reclaim_reent+0xb4>
 8007754:	69c3      	ldr	r3, [r0, #28]
 8007756:	b31b      	cbz	r3, 80077a0 <_reclaim_reent+0x58>
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	b163      	cbz	r3, 8007776 <_reclaim_reent+0x2e>
 800775c:	2500      	movs	r5, #0
 800775e:	69e3      	ldr	r3, [r4, #28]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	5959      	ldr	r1, [r3, r5]
 8007764:	b9b1      	cbnz	r1, 8007794 <_reclaim_reent+0x4c>
 8007766:	3504      	adds	r5, #4
 8007768:	2d80      	cmp	r5, #128	@ 0x80
 800776a:	d1f8      	bne.n	800775e <_reclaim_reent+0x16>
 800776c:	69e3      	ldr	r3, [r4, #28]
 800776e:	4620      	mov	r0, r4
 8007770:	68d9      	ldr	r1, [r3, #12]
 8007772:	f000 f87b 	bl	800786c <_free_r>
 8007776:	69e3      	ldr	r3, [r4, #28]
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	b111      	cbz	r1, 8007782 <_reclaim_reent+0x3a>
 800777c:	4620      	mov	r0, r4
 800777e:	f000 f875 	bl	800786c <_free_r>
 8007782:	69e3      	ldr	r3, [r4, #28]
 8007784:	689d      	ldr	r5, [r3, #8]
 8007786:	b15d      	cbz	r5, 80077a0 <_reclaim_reent+0x58>
 8007788:	4629      	mov	r1, r5
 800778a:	4620      	mov	r0, r4
 800778c:	682d      	ldr	r5, [r5, #0]
 800778e:	f000 f86d 	bl	800786c <_free_r>
 8007792:	e7f8      	b.n	8007786 <_reclaim_reent+0x3e>
 8007794:	680e      	ldr	r6, [r1, #0]
 8007796:	4620      	mov	r0, r4
 8007798:	f000 f868 	bl	800786c <_free_r>
 800779c:	4631      	mov	r1, r6
 800779e:	e7e1      	b.n	8007764 <_reclaim_reent+0x1c>
 80077a0:	6961      	ldr	r1, [r4, #20]
 80077a2:	b111      	cbz	r1, 80077aa <_reclaim_reent+0x62>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 f861 	bl	800786c <_free_r>
 80077aa:	69e1      	ldr	r1, [r4, #28]
 80077ac:	b111      	cbz	r1, 80077b4 <_reclaim_reent+0x6c>
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 f85c 	bl	800786c <_free_r>
 80077b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80077b6:	b111      	cbz	r1, 80077be <_reclaim_reent+0x76>
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 f857 	bl	800786c <_free_r>
 80077be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077c0:	b111      	cbz	r1, 80077c8 <_reclaim_reent+0x80>
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 f852 	bl	800786c <_free_r>
 80077c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80077ca:	b111      	cbz	r1, 80077d2 <_reclaim_reent+0x8a>
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 f84d 	bl	800786c <_free_r>
 80077d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077d4:	b111      	cbz	r1, 80077dc <_reclaim_reent+0x94>
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 f848 	bl	800786c <_free_r>
 80077dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80077de:	b111      	cbz	r1, 80077e6 <_reclaim_reent+0x9e>
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 f843 	bl	800786c <_free_r>
 80077e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80077e8:	b111      	cbz	r1, 80077f0 <_reclaim_reent+0xa8>
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 f83e 	bl	800786c <_free_r>
 80077f0:	6a23      	ldr	r3, [r4, #32]
 80077f2:	b11b      	cbz	r3, 80077fc <_reclaim_reent+0xb4>
 80077f4:	4620      	mov	r0, r4
 80077f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077fa:	4718      	bx	r3
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	bf00      	nop
 8007800:	20000010 	.word	0x20000010

08007804 <__libc_init_array>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4d0d      	ldr	r5, [pc, #52]	@ (800783c <__libc_init_array+0x38>)
 8007808:	4c0d      	ldr	r4, [pc, #52]	@ (8007840 <__libc_init_array+0x3c>)
 800780a:	1b64      	subs	r4, r4, r5
 800780c:	10a4      	asrs	r4, r4, #2
 800780e:	2600      	movs	r6, #0
 8007810:	42a6      	cmp	r6, r4
 8007812:	d109      	bne.n	8007828 <__libc_init_array+0x24>
 8007814:	4d0b      	ldr	r5, [pc, #44]	@ (8007844 <__libc_init_array+0x40>)
 8007816:	4c0c      	ldr	r4, [pc, #48]	@ (8007848 <__libc_init_array+0x44>)
 8007818:	f000 f87e 	bl	8007918 <_init>
 800781c:	1b64      	subs	r4, r4, r5
 800781e:	10a4      	asrs	r4, r4, #2
 8007820:	2600      	movs	r6, #0
 8007822:	42a6      	cmp	r6, r4
 8007824:	d105      	bne.n	8007832 <__libc_init_array+0x2e>
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	f855 3b04 	ldr.w	r3, [r5], #4
 800782c:	4798      	blx	r3
 800782e:	3601      	adds	r6, #1
 8007830:	e7ee      	b.n	8007810 <__libc_init_array+0xc>
 8007832:	f855 3b04 	ldr.w	r3, [r5], #4
 8007836:	4798      	blx	r3
 8007838:	3601      	adds	r6, #1
 800783a:	e7f2      	b.n	8007822 <__libc_init_array+0x1e>
 800783c:	080079d0 	.word	0x080079d0
 8007840:	080079d0 	.word	0x080079d0
 8007844:	080079d0 	.word	0x080079d0
 8007848:	080079d4 	.word	0x080079d4

0800784c <__retarget_lock_acquire_recursive>:
 800784c:	4770      	bx	lr

0800784e <__retarget_lock_release_recursive>:
 800784e:	4770      	bx	lr

08007850 <memcpy>:
 8007850:	440a      	add	r2, r1
 8007852:	4291      	cmp	r1, r2
 8007854:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007858:	d100      	bne.n	800785c <memcpy+0xc>
 800785a:	4770      	bx	lr
 800785c:	b510      	push	{r4, lr}
 800785e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007866:	4291      	cmp	r1, r2
 8007868:	d1f9      	bne.n	800785e <memcpy+0xe>
 800786a:	bd10      	pop	{r4, pc}

0800786c <_free_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4605      	mov	r5, r0
 8007870:	2900      	cmp	r1, #0
 8007872:	d041      	beq.n	80078f8 <_free_r+0x8c>
 8007874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007878:	1f0c      	subs	r4, r1, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfb8      	it	lt
 800787e:	18e4      	addlt	r4, r4, r3
 8007880:	f000 f83e 	bl	8007900 <__malloc_lock>
 8007884:	4a1d      	ldr	r2, [pc, #116]	@ (80078fc <_free_r+0x90>)
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	b933      	cbnz	r3, 8007898 <_free_r+0x2c>
 800788a:	6063      	str	r3, [r4, #4]
 800788c:	6014      	str	r4, [r2, #0]
 800788e:	4628      	mov	r0, r5
 8007890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007894:	f000 b83a 	b.w	800790c <__malloc_unlock>
 8007898:	42a3      	cmp	r3, r4
 800789a:	d908      	bls.n	80078ae <_free_r+0x42>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	1821      	adds	r1, r4, r0
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf01      	itttt	eq
 80078a4:	6819      	ldreq	r1, [r3, #0]
 80078a6:	685b      	ldreq	r3, [r3, #4]
 80078a8:	1809      	addeq	r1, r1, r0
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	e7ed      	b.n	800788a <_free_r+0x1e>
 80078ae:	461a      	mov	r2, r3
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	b10b      	cbz	r3, 80078b8 <_free_r+0x4c>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d9fa      	bls.n	80078ae <_free_r+0x42>
 80078b8:	6811      	ldr	r1, [r2, #0]
 80078ba:	1850      	adds	r0, r2, r1
 80078bc:	42a0      	cmp	r0, r4
 80078be:	d10b      	bne.n	80078d8 <_free_r+0x6c>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	4401      	add	r1, r0
 80078c4:	1850      	adds	r0, r2, r1
 80078c6:	4283      	cmp	r3, r0
 80078c8:	6011      	str	r1, [r2, #0]
 80078ca:	d1e0      	bne.n	800788e <_free_r+0x22>
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	6053      	str	r3, [r2, #4]
 80078d2:	4408      	add	r0, r1
 80078d4:	6010      	str	r0, [r2, #0]
 80078d6:	e7da      	b.n	800788e <_free_r+0x22>
 80078d8:	d902      	bls.n	80078e0 <_free_r+0x74>
 80078da:	230c      	movs	r3, #12
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	e7d6      	b.n	800788e <_free_r+0x22>
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	1821      	adds	r1, r4, r0
 80078e4:	428b      	cmp	r3, r1
 80078e6:	bf04      	itt	eq
 80078e8:	6819      	ldreq	r1, [r3, #0]
 80078ea:	685b      	ldreq	r3, [r3, #4]
 80078ec:	6063      	str	r3, [r4, #4]
 80078ee:	bf04      	itt	eq
 80078f0:	1809      	addeq	r1, r1, r0
 80078f2:	6021      	streq	r1, [r4, #0]
 80078f4:	6054      	str	r4, [r2, #4]
 80078f6:	e7ca      	b.n	800788e <_free_r+0x22>
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
 80078fa:	bf00      	nop
 80078fc:	20004dd4 	.word	0x20004dd4

08007900 <__malloc_lock>:
 8007900:	4801      	ldr	r0, [pc, #4]	@ (8007908 <__malloc_lock+0x8>)
 8007902:	f7ff bfa3 	b.w	800784c <__retarget_lock_acquire_recursive>
 8007906:	bf00      	nop
 8007908:	20004dd0 	.word	0x20004dd0

0800790c <__malloc_unlock>:
 800790c:	4801      	ldr	r0, [pc, #4]	@ (8007914 <__malloc_unlock+0x8>)
 800790e:	f7ff bf9e 	b.w	800784e <__retarget_lock_release_recursive>
 8007912:	bf00      	nop
 8007914:	20004dd0 	.word	0x20004dd0

08007918 <_init>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr

08007924 <_fini>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr
